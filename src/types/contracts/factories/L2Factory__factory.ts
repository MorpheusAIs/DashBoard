/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { L2Factory, L2FactoryInterface } from "../L2Factory";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "proxy",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "protocol",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "poolType",
        type: "string",
      },
    ],
    name: "ProxyDeployed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "L2Factory_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "L2_MESSAGE_RECEIVER_POOL",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "L2_TOKEN_RECEIVER_POOL",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "deployer_",
        type: "address",
      },
    ],
    name: "countProtocols",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isUpgradeable",
            type: "bool",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "string",
            name: "protocolName",
            type: "string",
          },
          {
            internalType: "string",
            name: "mor20Name",
            type: "string",
          },
          {
            internalType: "string",
            name: "mor20Symbol",
            type: "string",
          },
          {
            internalType: "address",
            name: "l1Sender",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "tokenIn",
                type: "address",
              },
              {
                internalType: "address",
                name: "tokenOut",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
            ],
            internalType: "struct IL2TokenReceiver.SwapParams",
            name: "firstSwapParams_",
            type: "tuple",
          },
          {
            internalType: "uint24",
            name: "secondSwapFee",
            type: "uint24",
          },
        ],
        internalType: "struct IL2Factory.L2Params",
        name: "l2Params_",
        type: "tuple",
      },
    ],
    name: "deploy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "protocol_",
        type: "string",
      },
      {
        internalType: "string",
        name: "poolType_",
        type: "string",
      },
    ],
    name: "freezePool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "poolType_",
        type: "string",
      },
    ],
    name: "getBeacon",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "deployer_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "offset_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limit_",
        type: "uint256",
      },
    ],
    name: "getDeployedPools",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "protocol",
            type: "string",
          },
          {
            internalType: "address",
            name: "l2MessageReceiver",
            type: "address",
          },
          {
            internalType: "address",
            name: "l2TokenReceiver",
            type: "address",
          },
          {
            internalType: "address",
            name: "mor20",
            type: "address",
          },
        ],
        internalType: "struct IL2Factory.PoolView[]",
        name: "pools_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "poolType_",
        type: "string",
      },
    ],
    name: "getImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "deployer_",
        type: "address",
      },
      {
        internalType: "string",
        name: "protocol_",
        type: "string",
      },
    ],
    name: "getMor20",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "deployer_",
        type: "address",
      },
      {
        internalType: "string",
        name: "protocol_",
        type: "string",
      },
      {
        internalType: "string",
        name: "poolType_",
        type: "string",
      },
    ],
    name: "getProxyPool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "deployer_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "offset_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limit_",
        type: "uint256",
      },
    ],
    name: "listProtocols",
    outputs: [
      {
        internalType: "string[]",
        name: "protocols_",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lzExternalDeps",
    outputs: [
      {
        internalType: "address",
        name: "endpoint",
        type: "address",
      },
      {
        internalType: "address",
        name: "oftEndpoint",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "senderChainId",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "deployer_",
        type: "address",
      },
      {
        internalType: "string",
        name: "protocol_",
        type: "string",
      },
    ],
    name: "predictAddresses",
    outputs: [
      {
        internalType: "address",
        name: "l2MessageReceiver_",
        type: "address",
      },
      {
        internalType: "address",
        name: "l2TokenReceiver_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "poolTypes_",
        type: "string[]",
      },
      {
        internalType: "address[]",
        name: "implementations_",
        type: "address[]",
      },
    ],
    name: "setImplementations",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "endpoint",
            type: "address",
          },
          {
            internalType: "address",
            name: "oftEndpoint",
            type: "address",
          },
          {
            internalType: "uint16",
            name: "senderChainId",
            type: "uint16",
          },
        ],
        internalType: "struct IL2Factory.LzExternalDeps",
        name: "lzExternalDeps_",
        type: "tuple",
      },
    ],
    name: "setLzExternalDeps",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "router",
            type: "address",
          },
          {
            internalType: "address",
            name: "nonfungiblePositionManager",
            type: "address",
          },
        ],
        internalType: "struct IL2Factory.UniswapExternalDeps",
        name: "uniswapExternalDeps_",
        type: "tuple",
      },
    ],
    name: "setUniswapExternalDeps",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "protocol_",
        type: "string",
      },
      {
        internalType: "string",
        name: "poolType_",
        type: "string",
      },
    ],
    name: "unfreezePool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "uniswapExternalDeps",
    outputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "nonfungiblePositionManager",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class L2Factory__factory {
  static readonly abi = _abi;
  static createInterface(): L2FactoryInterface {
    return new utils.Interface(_abi) as L2FactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): L2Factory {
    return new Contract(address, _abi, signerOrProvider) as L2Factory;
  }
}
