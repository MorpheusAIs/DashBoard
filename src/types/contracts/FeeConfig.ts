/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface FeeConfigInterface extends utils.Interface {
  functions: {
    "FeeConfig_init(address,uint256)": FunctionFragment;
    "discardCustomFee(address,bytes32)": FunctionFragment;
    "getFeeAndTreasury(address)": FunctionFragment;
    "getFeeAndTreasuryForOperation(address,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBaseFee(uint256)": FunctionFragment;
    "setBaseFeeForOperation(bytes32,uint256)": FunctionFragment;
    "setFee(address,uint256)": FunctionFragment;
    "setFeeForOperation(address,bytes32,uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FeeConfig_init"
      | "discardCustomFee"
      | "getFeeAndTreasury"
      | "getFeeAndTreasuryForOperation"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setBaseFee"
      | "setBaseFeeForOperation"
      | "setFee"
      | "setFeeForOperation"
      | "setTreasury"
      | "supportsInterface"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FeeConfig_init",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "discardCustomFee",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeAndTreasury",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeAndTreasuryForOperation",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseFeeForOperation",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeForOperation",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "FeeConfig_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discardCustomFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeAndTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeAndTreasuryForOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBaseFeeForOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeForOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BaseFeeForOperationSet(bytes32,uint256)": EventFragment;
    "BaseFeeSet(uint256)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "FeeForOperationDiscarded(address,bytes32)": EventFragment;
    "FeeForOperationSet(address,bytes32,uint256)": EventFragment;
    "FeeSet(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TreasurySet(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseFeeForOperationSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeForOperationDiscarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeForOperationSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasurySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BaseFeeForOperationSetEventObject {
  operation: string;
  baseFeeForOperation: BigNumber;
}
export type BaseFeeForOperationSetEvent = TypedEvent<
  [string, BigNumber],
  BaseFeeForOperationSetEventObject
>;

export type BaseFeeForOperationSetEventFilter =
  TypedEventFilter<BaseFeeForOperationSetEvent>;

export interface BaseFeeSetEventObject {
  baseFee: BigNumber;
}
export type BaseFeeSetEvent = TypedEvent<[BigNumber], BaseFeeSetEventObject>;

export type BaseFeeSetEventFilter = TypedEventFilter<BaseFeeSetEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface FeeForOperationDiscardedEventObject {
  sender: string;
  operation: string;
}
export type FeeForOperationDiscardedEvent = TypedEvent<
  [string, string],
  FeeForOperationDiscardedEventObject
>;

export type FeeForOperationDiscardedEventFilter =
  TypedEventFilter<FeeForOperationDiscardedEvent>;

export interface FeeForOperationSetEventObject {
  sender: string;
  operation: string;
  fee: BigNumber;
}
export type FeeForOperationSetEvent = TypedEvent<
  [string, string, BigNumber],
  FeeForOperationSetEventObject
>;

export type FeeForOperationSetEventFilter =
  TypedEventFilter<FeeForOperationSetEvent>;

export interface FeeSetEventObject {
  sender: string;
  fee: BigNumber;
}
export type FeeSetEvent = TypedEvent<[string, BigNumber], FeeSetEventObject>;

export type FeeSetEventFilter = TypedEventFilter<FeeSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TreasurySetEventObject {
  treasury: string;
}
export type TreasurySetEvent = TypedEvent<[string], TreasurySetEventObject>;

export type TreasurySetEventFilter = TypedEventFilter<TreasurySetEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface FeeConfig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeConfigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FeeConfig_init(
      treasury_: string,
      baseFee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    discardCustomFee(
      sender_: string,
      operation_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getFeeAndTreasury(
      sender_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    getFeeAndTreasuryForOperation(
      sender_: string,
      operation_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBaseFee(
      baseFee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBaseFeeForOperation(
      operation_: BytesLike,
      baseFeeForOperation_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFee(
      sender_: string,
      fee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeForOperation(
      sender_: string,
      operation_: BytesLike,
      fee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTreasury(
      treasury_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  FeeConfig_init(
    treasury_: string,
    baseFee_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  discardCustomFee(
    sender_: string,
    operation_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getFeeAndTreasury(
    sender_: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string]>;

  getFeeAndTreasuryForOperation(
    sender_: string,
    operation_: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string]>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setBaseFee(
    baseFee_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setBaseFeeForOperation(
    operation_: BytesLike,
    baseFeeForOperation_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFee(
    sender_: string,
    fee_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeForOperation(
    sender_: string,
    operation_: BytesLike,
    fee_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTreasury(
    treasury_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId_: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    FeeConfig_init(
      treasury_: string,
      baseFee_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    discardCustomFee(
      sender_: string,
      operation_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getFeeAndTreasury(
      sender_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    getFeeAndTreasuryForOperation(
      sender_: string,
      operation_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBaseFee(
      baseFee_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseFeeForOperation(
      operation_: BytesLike,
      baseFeeForOperation_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      sender_: string,
      fee_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeForOperation(
      sender_: string,
      operation_: BytesLike,
      fee_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(treasury_: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BaseFeeForOperationSet(bytes32,uint256)"(
      operation?: null,
      baseFeeForOperation?: null
    ): BaseFeeForOperationSetEventFilter;
    BaseFeeForOperationSet(
      operation?: null,
      baseFeeForOperation?: null
    ): BaseFeeForOperationSetEventFilter;

    "BaseFeeSet(uint256)"(baseFee?: null): BaseFeeSetEventFilter;
    BaseFeeSet(baseFee?: null): BaseFeeSetEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "FeeForOperationDiscarded(address,bytes32)"(
      sender?: string | null,
      operation?: null
    ): FeeForOperationDiscardedEventFilter;
    FeeForOperationDiscarded(
      sender?: string | null,
      operation?: null
    ): FeeForOperationDiscardedEventFilter;

    "FeeForOperationSet(address,bytes32,uint256)"(
      sender?: string | null,
      operation?: null,
      fee?: null
    ): FeeForOperationSetEventFilter;
    FeeForOperationSet(
      sender?: string | null,
      operation?: null,
      fee?: null
    ): FeeForOperationSetEventFilter;

    "FeeSet(address,uint256)"(
      sender?: string | null,
      fee?: null
    ): FeeSetEventFilter;
    FeeSet(sender?: string | null, fee?: null): FeeSetEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TreasurySet(address)"(treasury?: null): TreasurySetEventFilter;
    TreasurySet(treasury?: null): TreasurySetEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    FeeConfig_init(
      treasury_: string,
      baseFee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    discardCustomFee(
      sender_: string,
      operation_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getFeeAndTreasury(
      sender_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeAndTreasuryForOperation(
      sender_: string,
      operation_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setBaseFee(
      baseFee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setBaseFeeForOperation(
      operation_: BytesLike,
      baseFeeForOperation_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFee(
      sender_: string,
      fee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeForOperation(
      sender_: string,
      operation_: BytesLike,
      fee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTreasury(
      treasury_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FeeConfig_init(
      treasury_: string,
      baseFee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    discardCustomFee(
      sender_: string,
      operation_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getFeeAndTreasury(
      sender_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeAndTreasuryForOperation(
      sender_: string,
      operation_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBaseFee(
      baseFee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBaseFeeForOperation(
      operation_: BytesLike,
      baseFeeForOperation_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFee(
      sender_: string,
      fee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeForOperation(
      sender_: string,
      operation_: BytesLike,
      fee_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      treasury_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
