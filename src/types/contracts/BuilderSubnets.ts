/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IBuilderSubnets {
  export type BuildersPoolDataStruct = {
    initialAmount: BigNumberish;
    decreaseAmount: BigNumberish;
    payoutStart: BigNumberish;
    interval: BigNumberish;
  };

  export type BuildersPoolDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    initialAmount: BigNumber;
    decreaseAmount: BigNumber;
    payoutStart: BigNumber;
    interval: BigNumber;
  };

  export type StakerStruct = {
    lastInteraction: BigNumberish;
    lastStake: BigNumberish;
    claimLockEnd: BigNumberish;
    staked: BigNumberish;
    virtualStaked: BigNumberish;
    pendingRewards: BigNumberish;
  };

  export type StakerStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    lastInteraction: BigNumber;
    lastStake: BigNumber;
    claimLockEnd: BigNumber;
    staked: BigNumber;
    virtualStaked: BigNumber;
    pendingRewards: BigNumber;
  };

  export type BuildersSubnetStruct = {
    name: string;
    owner: string;
    minStake: BigNumberish;
    fee: BigNumberish;
    feeTreasury: string;
    startsAt: BigNumberish;
    withdrawLockPeriodAfterStake: BigNumberish;
    minClaimLockEnd: BigNumberish;
  };

  export type BuildersSubnetStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    name: string;
    owner: string;
    minStake: BigNumber;
    fee: BigNumber;
    feeTreasury: string;
    startsAt: BigNumber;
    withdrawLockPeriodAfterStake: BigNumber;
    minClaimLockEnd: BigNumber;
  };

  export type BuildersSubnetMetadataStruct = {
    slug: string;
    description: string;
    website: string;
    image: string;
  };

  export type BuildersSubnetMetadataStructOutput = [
    string,
    string,
    string,
    string
  ] & { slug: string; description: string; website: string; image: string };
}

export interface BuilderSubnetsInterface extends utils.Interface {
  functions: {
    "BuilderSubnets_init(address,address,address,uint256)": FunctionFragment;
    "FEE_CLAIM_OPERATION()": FunctionFragment;
    "FEE_WITHDRAW_OPERATION()": FunctionFragment;
    "buildersPoolData()": FunctionFragment;
    "buildersSubnets(bytes32)": FunctionFragment;
    "buildersSubnetsData(bytes32)": FunctionFragment;
    "buildersSubnetsMetadata(bytes32)": FunctionFragment;
    "claim(bytes32,address)": FunctionFragment;
    "collectPendingRewards(bytes32,address,uint128)": FunctionFragment;
    "createSubnet((string,address,uint256,uint256,address,uint128,uint128,uint128),(string,string,string,string))": FunctionFragment;
    "editSubnetMetadata(bytes32,(string,string,string,string))": FunctionFragment;
    "feeConfig()": FunctionFragment;
    "getMaxTotalVirtualStaked(uint128)": FunctionFragment;
    "getPeriodRewardForBuildersPool(uint128,uint128)": FunctionFragment;
    "getPeriodRewardForStake(uint256,uint128,uint128)": FunctionFragment;
    "getPowerFactor(uint128,uint128)": FunctionFragment;
    "getStakerPowerFactor(bytes32,address)": FunctionFragment;
    "getStakerRewards(bytes32,address,uint128)": FunctionFragment;
    "getSubnetId(string)": FunctionFragment;
    "isMigrationOver()": FunctionFragment;
    "maxStakedShareForBuildersPool()": FunctionFragment;
    "minWithdrawLockPeriodAfterStake()": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardCalculationStartsAt()": FunctionFragment;
    "setBuildersPoolData((uint256,uint256,uint128,uint128))": FunctionFragment;
    "setFeeConfig(address)": FunctionFragment;
    "setIsMigrationOver(bool)": FunctionFragment;
    "setMaxStakedShareForBuildersPool(uint256)": FunctionFragment;
    "setMinWithdrawLockPeriodAfterStake(uint256)": FunctionFragment;
    "setRewardCalculationStartsAt(uint128)": FunctionFragment;
    "setSubnetFeeTreasury(bytes32,address)": FunctionFragment;
    "setSubnetMinStake(bytes32,uint256)": FunctionFragment;
    "setSubnetOwnership(bytes32,address)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "stake(bytes32,address,uint256,uint128)": FunctionFragment;
    "stakers(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "token()": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "totalVirtualStaked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "version()": FunctionFragment;
    "withdraw(bytes32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BuilderSubnets_init"
      | "FEE_CLAIM_OPERATION"
      | "FEE_WITHDRAW_OPERATION"
      | "buildersPoolData"
      | "buildersSubnets"
      | "buildersSubnetsData"
      | "buildersSubnetsMetadata"
      | "claim"
      | "collectPendingRewards"
      | "createSubnet"
      | "editSubnetMetadata"
      | "feeConfig"
      | "getMaxTotalVirtualStaked"
      | "getPeriodRewardForBuildersPool"
      | "getPeriodRewardForStake"
      | "getPowerFactor"
      | "getStakerPowerFactor"
      | "getStakerRewards"
      | "getSubnetId"
      | "isMigrationOver"
      | "maxStakedShareForBuildersPool"
      | "minWithdrawLockPeriodAfterStake"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "rewardCalculationStartsAt"
      | "setBuildersPoolData"
      | "setFeeConfig"
      | "setIsMigrationOver"
      | "setMaxStakedShareForBuildersPool"
      | "setMinWithdrawLockPeriodAfterStake"
      | "setRewardCalculationStartsAt"
      | "setSubnetFeeTreasury"
      | "setSubnetMinStake"
      | "setSubnetOwnership"
      | "setTreasury"
      | "stake"
      | "stakers"
      | "supportsInterface"
      | "token"
      | "totalStaked"
      | "totalVirtualStaked"
      | "transferOwnership"
      | "treasury"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "version"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BuilderSubnets_init",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_CLAIM_OPERATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_WITHDRAW_OPERATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buildersPoolData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buildersSubnets",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buildersSubnetsData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buildersSubnetsMetadata",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "collectPendingRewards",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubnet",
    values: [
      IBuilderSubnets.BuildersSubnetStruct,
      IBuilderSubnets.BuildersSubnetMetadataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "editSubnetMetadata",
    values: [BytesLike, IBuilderSubnets.BuildersSubnetMetadataStruct]
  ): string;
  encodeFunctionData(functionFragment: "feeConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMaxTotalVirtualStaked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodRewardForBuildersPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodRewardForStake",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPowerFactor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakerPowerFactor",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakerRewards",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getSubnetId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isMigrationOver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxStakedShareForBuildersPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minWithdrawLockPeriodAfterStake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardCalculationStartsAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBuildersPoolData",
    values: [IBuilderSubnets.BuildersPoolDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeConfig",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsMigrationOver",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxStakedShareForBuildersPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinWithdrawLockPeriodAfterStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardCalculationStartsAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubnetFeeTreasury",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubnetMinStake",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubnetOwnership",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVirtualStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BuilderSubnets_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_CLAIM_OPERATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_WITHDRAW_OPERATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildersPoolData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildersSubnets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildersSubnetsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildersSubnetsMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubnet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editSubnetMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxTotalVirtualStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodRewardForBuildersPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodRewardForStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPowerFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakerPowerFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakerRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubnetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMigrationOver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxStakedShareForBuildersPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minWithdrawLockPeriodAfterStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardCalculationStartsAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuildersPoolData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsMigrationOver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxStakedShareForBuildersPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinWithdrawLockPeriodAfterStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardCalculationStartsAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubnetFeeTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubnetMinStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubnetOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVirtualStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "BuildersPoolDataSet((uint256,uint256,uint128,uint128))": EventFragment;
    "Claimed(bytes32,address,(uint128,uint128,uint128,uint256,uint256,uint256),uint256)": EventFragment;
    "FeeConfigSet(address)": EventFragment;
    "FeePaid(bytes32,address,uint256,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "IsMigrationOverSet(bool)": EventFragment;
    "MaxStakedShareForBuildersPoolSet(uint256)": EventFragment;
    "MinimalWithdrawLockPeriodSet(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PendingRewardsCollected(bytes32,address,(uint128,uint128,uint128,uint256,uint256,uint256))": EventFragment;
    "RewardCalculationStartsAtSet(uint128)": EventFragment;
    "Staked(bytes32,address,(uint128,uint128,uint128,uint256,uint256,uint256))": EventFragment;
    "SubnetEdited(bytes32,(string,address,uint256,uint256,address,uint128,uint128,uint128))": EventFragment;
    "SubnetFeeTreasurySet(bytes32,address,address)": EventFragment;
    "SubnetMetadataEdited(bytes32,(string,string,string,string))": EventFragment;
    "SubnetMinStakeSet(bytes32,uint256,uint256)": EventFragment;
    "SubnetOwnerSet(bytes32,address,address)": EventFragment;
    "TreasurySet(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "Withdrawn(bytes32,address,(uint128,uint128,uint128,uint256,uint256,uint256),uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuildersPoolDataSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeConfigSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IsMigrationOverSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxStakedShareForBuildersPoolSet"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinimalWithdrawLockPeriodSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingRewardsCollected"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RewardCalculationStartsAtSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubnetEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubnetFeeTreasurySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubnetMetadataEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubnetMinStakeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubnetOwnerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasurySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface BuildersPoolDataSetEventObject {
  buildersPoolData: IBuilderSubnets.BuildersPoolDataStructOutput;
}
export type BuildersPoolDataSetEvent = TypedEvent<
  [IBuilderSubnets.BuildersPoolDataStructOutput],
  BuildersPoolDataSetEventObject
>;

export type BuildersPoolDataSetEventFilter =
  TypedEventFilter<BuildersPoolDataSetEvent>;

export interface ClaimedEventObject {
  subnetId: string;
  stakerAddress: string;
  staker: IBuilderSubnets.StakerStructOutput;
  amount: BigNumber;
}
export type ClaimedEvent = TypedEvent<
  [string, string, IBuilderSubnets.StakerStructOutput, BigNumber],
  ClaimedEventObject
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface FeeConfigSetEventObject {
  feeConfig: string;
}
export type FeeConfigSetEvent = TypedEvent<[string], FeeConfigSetEventObject>;

export type FeeConfigSetEventFilter = TypedEventFilter<FeeConfigSetEvent>;

export interface FeePaidEventObject {
  subnetId: string;
  stakerAddress: string;
  fee: BigNumber;
  treasury: string;
}
export type FeePaidEvent = TypedEvent<
  [string, string, BigNumber, string],
  FeePaidEventObject
>;

export type FeePaidEventFilter = TypedEventFilter<FeePaidEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface IsMigrationOverSetEventObject {
  isMigrationOver: boolean;
}
export type IsMigrationOverSetEvent = TypedEvent<
  [boolean],
  IsMigrationOverSetEventObject
>;

export type IsMigrationOverSetEventFilter =
  TypedEventFilter<IsMigrationOverSetEvent>;

export interface MaxStakedShareForBuildersPoolSetEventObject {
  maxStakedShareForBuildersPool: BigNumber;
}
export type MaxStakedShareForBuildersPoolSetEvent = TypedEvent<
  [BigNumber],
  MaxStakedShareForBuildersPoolSetEventObject
>;

export type MaxStakedShareForBuildersPoolSetEventFilter =
  TypedEventFilter<MaxStakedShareForBuildersPoolSetEvent>;

export interface MinimalWithdrawLockPeriodSetEventObject {
  minWithdrawLockPeriodAfterStake: BigNumber;
}
export type MinimalWithdrawLockPeriodSetEvent = TypedEvent<
  [BigNumber],
  MinimalWithdrawLockPeriodSetEventObject
>;

export type MinimalWithdrawLockPeriodSetEventFilter =
  TypedEventFilter<MinimalWithdrawLockPeriodSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PendingRewardsCollectedEventObject {
  subnetId: string;
  stakerAddress: string;
  staker: IBuilderSubnets.StakerStructOutput;
}
export type PendingRewardsCollectedEvent = TypedEvent<
  [string, string, IBuilderSubnets.StakerStructOutput],
  PendingRewardsCollectedEventObject
>;

export type PendingRewardsCollectedEventFilter =
  TypedEventFilter<PendingRewardsCollectedEvent>;

export interface RewardCalculationStartsAtSetEventObject {
  rewardCalculationStartsAt: BigNumber;
}
export type RewardCalculationStartsAtSetEvent = TypedEvent<
  [BigNumber],
  RewardCalculationStartsAtSetEventObject
>;

export type RewardCalculationStartsAtSetEventFilter =
  TypedEventFilter<RewardCalculationStartsAtSetEvent>;

export interface StakedEventObject {
  subnetId: string;
  stakerAddress: string;
  staker: IBuilderSubnets.StakerStructOutput;
}
export type StakedEvent = TypedEvent<
  [string, string, IBuilderSubnets.StakerStructOutput],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface SubnetEditedEventObject {
  subnetId: string;
  subnet: IBuilderSubnets.BuildersSubnetStructOutput;
}
export type SubnetEditedEvent = TypedEvent<
  [string, IBuilderSubnets.BuildersSubnetStructOutput],
  SubnetEditedEventObject
>;

export type SubnetEditedEventFilter = TypedEventFilter<SubnetEditedEvent>;

export interface SubnetFeeTreasurySetEventObject {
  subnetId: string;
  oldValue: string;
  newValue: string;
}
export type SubnetFeeTreasurySetEvent = TypedEvent<
  [string, string, string],
  SubnetFeeTreasurySetEventObject
>;

export type SubnetFeeTreasurySetEventFilter =
  TypedEventFilter<SubnetFeeTreasurySetEvent>;

export interface SubnetMetadataEditedEventObject {
  subnetId: string;
  subnetMetadata: IBuilderSubnets.BuildersSubnetMetadataStructOutput;
}
export type SubnetMetadataEditedEvent = TypedEvent<
  [string, IBuilderSubnets.BuildersSubnetMetadataStructOutput],
  SubnetMetadataEditedEventObject
>;

export type SubnetMetadataEditedEventFilter =
  TypedEventFilter<SubnetMetadataEditedEvent>;

export interface SubnetMinStakeSetEventObject {
  subnetId: string;
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type SubnetMinStakeSetEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SubnetMinStakeSetEventObject
>;

export type SubnetMinStakeSetEventFilter =
  TypedEventFilter<SubnetMinStakeSetEvent>;

export interface SubnetOwnerSetEventObject {
  subnetId: string;
  oldValue: string;
  newValue: string;
}
export type SubnetOwnerSetEvent = TypedEvent<
  [string, string, string],
  SubnetOwnerSetEventObject
>;

export type SubnetOwnerSetEventFilter = TypedEventFilter<SubnetOwnerSetEvent>;

export interface TreasurySetEventObject {
  treasury: string;
}
export type TreasurySetEvent = TypedEvent<[string], TreasurySetEventObject>;

export type TreasurySetEventFilter = TypedEventFilter<TreasurySetEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WithdrawnEventObject {
  subnetId: string;
  stakerAddress: string;
  staker: IBuilderSubnets.StakerStructOutput;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, string, IBuilderSubnets.StakerStructOutput, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface BuilderSubnets extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BuilderSubnetsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BuilderSubnets_init(
      token_: string,
      feeConfig_: string,
      treasury_: string,
      minWithdrawLockPeriodAfterStake_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    FEE_CLAIM_OPERATION(overrides?: CallOverrides): Promise<[string]>;

    FEE_WITHDRAW_OPERATION(overrides?: CallOverrides): Promise<[string]>;

    buildersPoolData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        initialAmount: BigNumber;
        decreaseAmount: BigNumber;
        payoutStart: BigNumber;
        interval: BigNumber;
      }
    >;

    buildersSubnets(
      subnetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        owner: string;
        minStake: BigNumber;
        fee: BigNumber;
        feeTreasury: string;
        startsAt: BigNumber;
        withdrawLockPeriodAfterStake: BigNumber;
        minClaimLockEnd: BigNumber;
      }
    >;

    buildersSubnetsData(
      subnetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { staked: BigNumber; virtualStaked: BigNumber }
    >;

    buildersSubnetsMetadata(
      subnetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        slug: string;
        description: string;
        website: string;
        image: string;
      }
    >;

    claim(
      subnetId_: BytesLike,
      stakerAddress_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    collectPendingRewards(
      subnetId_: BytesLike,
      stakerAddress_: string,
      to_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createSubnet(
      subnet_: IBuilderSubnets.BuildersSubnetStruct,
      metadata_: IBuilderSubnets.BuildersSubnetMetadataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    editSubnetMetadata(
      subnetId_: BytesLike,
      metadata_: IBuilderSubnets.BuildersSubnetMetadataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    feeConfig(overrides?: CallOverrides): Promise<[string]>;

    getMaxTotalVirtualStaked(
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPeriodRewardForBuildersPool(
      from_: BigNumberish,
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPeriodRewardForStake(
      virtualStaked_: BigNumberish,
      from_: BigNumberish,
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPowerFactor(
      from_: BigNumberish,
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakerPowerFactor(
      subnetId_: BytesLike,
      stakerAddress_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakerRewards(
      subnetId_: BytesLike,
      stakerAddress_: string,
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSubnetId(name_: string, overrides?: CallOverrides): Promise<[string]>;

    isMigrationOver(overrides?: CallOverrides): Promise<[boolean]>;

    maxStakedShareForBuildersPool(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minWithdrawLockPeriodAfterStake(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rewardCalculationStartsAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBuildersPoolData(
      buildersPoolData_: IBuilderSubnets.BuildersPoolDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeConfig(
      feeConfig_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setIsMigrationOver(
      value_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMaxStakedShareForBuildersPool(
      maxStakedShareForBuildersPool_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMinWithdrawLockPeriodAfterStake(
      minWithdrawLockPeriodAfterStake_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRewardCalculationStartsAt(
      rewardCalculationStartsAt_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSubnetFeeTreasury(
      subnetId_: BytesLike,
      newValue_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSubnetMinStake(
      subnetId_: BytesLike,
      newValue_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSubnetOwnership(
      subnetId_: BytesLike,
      newValue_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTreasury(
      treasury_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stake(
      subnetId_: BytesLike,
      stakerAddress_: string,
      amount_: BigNumberish,
      claimLockEnd_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakers(
      subnetId: BytesLike,
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastInteraction: BigNumber;
        lastStake: BigNumber;
        claimLockEnd: BigNumber;
        staked: BigNumber;
        virtualStaked: BigNumber;
        pendingRewards: BigNumber;
      }
    >;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVirtualStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      subnetId_: BytesLike,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  BuilderSubnets_init(
    token_: string,
    feeConfig_: string,
    treasury_: string,
    minWithdrawLockPeriodAfterStake_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  FEE_CLAIM_OPERATION(overrides?: CallOverrides): Promise<string>;

  FEE_WITHDRAW_OPERATION(overrides?: CallOverrides): Promise<string>;

  buildersPoolData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      initialAmount: BigNumber;
      decreaseAmount: BigNumber;
      payoutStart: BigNumber;
      interval: BigNumber;
    }
  >;

  buildersSubnets(
    subnetId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      name: string;
      owner: string;
      minStake: BigNumber;
      fee: BigNumber;
      feeTreasury: string;
      startsAt: BigNumber;
      withdrawLockPeriodAfterStake: BigNumber;
      minClaimLockEnd: BigNumber;
    }
  >;

  buildersSubnetsData(
    subnetId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { staked: BigNumber; virtualStaked: BigNumber }
  >;

  buildersSubnetsMetadata(
    subnetId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      slug: string;
      description: string;
      website: string;
      image: string;
    }
  >;

  claim(
    subnetId_: BytesLike,
    stakerAddress_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  collectPendingRewards(
    subnetId_: BytesLike,
    stakerAddress_: string,
    to_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createSubnet(
    subnet_: IBuilderSubnets.BuildersSubnetStruct,
    metadata_: IBuilderSubnets.BuildersSubnetMetadataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  editSubnetMetadata(
    subnetId_: BytesLike,
    metadata_: IBuilderSubnets.BuildersSubnetMetadataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  feeConfig(overrides?: CallOverrides): Promise<string>;

  getMaxTotalVirtualStaked(
    to_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPeriodRewardForBuildersPool(
    from_: BigNumberish,
    to_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPeriodRewardForStake(
    virtualStaked_: BigNumberish,
    from_: BigNumberish,
    to_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPowerFactor(
    from_: BigNumberish,
    to_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakerPowerFactor(
    subnetId_: BytesLike,
    stakerAddress_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakerRewards(
    subnetId_: BytesLike,
    stakerAddress_: string,
    to_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubnetId(name_: string, overrides?: CallOverrides): Promise<string>;

  isMigrationOver(overrides?: CallOverrides): Promise<boolean>;

  maxStakedShareForBuildersPool(overrides?: CallOverrides): Promise<BigNumber>;

  minWithdrawLockPeriodAfterStake(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rewardCalculationStartsAt(overrides?: CallOverrides): Promise<BigNumber>;

  setBuildersPoolData(
    buildersPoolData_: IBuilderSubnets.BuildersPoolDataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeConfig(
    feeConfig_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setIsMigrationOver(
    value_: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMaxStakedShareForBuildersPool(
    maxStakedShareForBuildersPool_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMinWithdrawLockPeriodAfterStake(
    minWithdrawLockPeriodAfterStake_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRewardCalculationStartsAt(
    rewardCalculationStartsAt_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSubnetFeeTreasury(
    subnetId_: BytesLike,
    newValue_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSubnetMinStake(
    subnetId_: BytesLike,
    newValue_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSubnetOwnership(
    subnetId_: BytesLike,
    newValue_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTreasury(
    treasury_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stake(
    subnetId_: BytesLike,
    stakerAddress_: string,
    amount_: BigNumberish,
    claimLockEnd_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakers(
    subnetId: BytesLike,
    stakerAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      lastInteraction: BigNumber;
      lastStake: BigNumber;
      claimLockEnd: BigNumber;
      staked: BigNumber;
      virtualStaked: BigNumber;
      pendingRewards: BigNumber;
    }
  >;

  supportsInterface(
    interfaceId_: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  totalVirtualStaked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    subnetId_: BytesLike,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    BuilderSubnets_init(
      token_: string,
      feeConfig_: string,
      treasury_: string,
      minWithdrawLockPeriodAfterStake_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    FEE_CLAIM_OPERATION(overrides?: CallOverrides): Promise<string>;

    FEE_WITHDRAW_OPERATION(overrides?: CallOverrides): Promise<string>;

    buildersPoolData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        initialAmount: BigNumber;
        decreaseAmount: BigNumber;
        payoutStart: BigNumber;
        interval: BigNumber;
      }
    >;

    buildersSubnets(
      subnetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        owner: string;
        minStake: BigNumber;
        fee: BigNumber;
        feeTreasury: string;
        startsAt: BigNumber;
        withdrawLockPeriodAfterStake: BigNumber;
        minClaimLockEnd: BigNumber;
      }
    >;

    buildersSubnetsData(
      subnetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { staked: BigNumber; virtualStaked: BigNumber }
    >;

    buildersSubnetsMetadata(
      subnetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        slug: string;
        description: string;
        website: string;
        image: string;
      }
    >;

    claim(
      subnetId_: BytesLike,
      stakerAddress_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    collectPendingRewards(
      subnetId_: BytesLike,
      stakerAddress_: string,
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createSubnet(
      subnet_: IBuilderSubnets.BuildersSubnetStruct,
      metadata_: IBuilderSubnets.BuildersSubnetMetadataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    editSubnetMetadata(
      subnetId_: BytesLike,
      metadata_: IBuilderSubnets.BuildersSubnetMetadataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    feeConfig(overrides?: CallOverrides): Promise<string>;

    getMaxTotalVirtualStaked(
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodRewardForBuildersPool(
      from_: BigNumberish,
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodRewardForStake(
      virtualStaked_: BigNumberish,
      from_: BigNumberish,
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerFactor(
      from_: BigNumberish,
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakerPowerFactor(
      subnetId_: BytesLike,
      stakerAddress_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakerRewards(
      subnetId_: BytesLike,
      stakerAddress_: string,
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubnetId(name_: string, overrides?: CallOverrides): Promise<string>;

    isMigrationOver(overrides?: CallOverrides): Promise<boolean>;

    maxStakedShareForBuildersPool(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minWithdrawLockPeriodAfterStake(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardCalculationStartsAt(overrides?: CallOverrides): Promise<BigNumber>;

    setBuildersPoolData(
      buildersPoolData_: IBuilderSubnets.BuildersPoolDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeConfig(feeConfig_: string, overrides?: CallOverrides): Promise<void>;

    setIsMigrationOver(
      value_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxStakedShareForBuildersPool(
      maxStakedShareForBuildersPool_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinWithdrawLockPeriodAfterStake(
      minWithdrawLockPeriodAfterStake_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardCalculationStartsAt(
      rewardCalculationStartsAt_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubnetFeeTreasury(
      subnetId_: BytesLike,
      newValue_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubnetMinStake(
      subnetId_: BytesLike,
      newValue_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubnetOwnership(
      subnetId_: BytesLike,
      newValue_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(treasury_: string, overrides?: CallOverrides): Promise<void>;

    stake(
      subnetId_: BytesLike,
      stakerAddress_: string,
      amount_: BigNumberish,
      claimLockEnd_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakers(
      subnetId: BytesLike,
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastInteraction: BigNumber;
        lastStake: BigNumber;
        claimLockEnd: BigNumber;
        staked: BigNumber;
        virtualStaked: BigNumber;
        pendingRewards: BigNumber;
      }
    >;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalVirtualStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      subnetId_: BytesLike,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "BuildersPoolDataSet((uint256,uint256,uint128,uint128))"(
      buildersPoolData?: null
    ): BuildersPoolDataSetEventFilter;
    BuildersPoolDataSet(
      buildersPoolData?: null
    ): BuildersPoolDataSetEventFilter;

    "Claimed(bytes32,address,(uint128,uint128,uint128,uint256,uint256,uint256),uint256)"(
      subnetId?: BytesLike | null,
      stakerAddress?: null,
      staker?: null,
      amount?: null
    ): ClaimedEventFilter;
    Claimed(
      subnetId?: BytesLike | null,
      stakerAddress?: null,
      staker?: null,
      amount?: null
    ): ClaimedEventFilter;

    "FeeConfigSet(address)"(feeConfig?: null): FeeConfigSetEventFilter;
    FeeConfigSet(feeConfig?: null): FeeConfigSetEventFilter;

    "FeePaid(bytes32,address,uint256,address)"(
      subnetId?: BytesLike | null,
      stakerAddress?: null,
      fee?: null,
      treasury?: null
    ): FeePaidEventFilter;
    FeePaid(
      subnetId?: BytesLike | null,
      stakerAddress?: null,
      fee?: null,
      treasury?: null
    ): FeePaidEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "IsMigrationOverSet(bool)"(
      isMigrationOver?: null
    ): IsMigrationOverSetEventFilter;
    IsMigrationOverSet(isMigrationOver?: null): IsMigrationOverSetEventFilter;

    "MaxStakedShareForBuildersPoolSet(uint256)"(
      maxStakedShareForBuildersPool?: null
    ): MaxStakedShareForBuildersPoolSetEventFilter;
    MaxStakedShareForBuildersPoolSet(
      maxStakedShareForBuildersPool?: null
    ): MaxStakedShareForBuildersPoolSetEventFilter;

    "MinimalWithdrawLockPeriodSet(uint256)"(
      minWithdrawLockPeriodAfterStake?: null
    ): MinimalWithdrawLockPeriodSetEventFilter;
    MinimalWithdrawLockPeriodSet(
      minWithdrawLockPeriodAfterStake?: null
    ): MinimalWithdrawLockPeriodSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PendingRewardsCollected(bytes32,address,(uint128,uint128,uint128,uint256,uint256,uint256))"(
      subnetId?: BytesLike | null,
      stakerAddress?: null,
      staker?: null
    ): PendingRewardsCollectedEventFilter;
    PendingRewardsCollected(
      subnetId?: BytesLike | null,
      stakerAddress?: null,
      staker?: null
    ): PendingRewardsCollectedEventFilter;

    "RewardCalculationStartsAtSet(uint128)"(
      rewardCalculationStartsAt?: null
    ): RewardCalculationStartsAtSetEventFilter;
    RewardCalculationStartsAtSet(
      rewardCalculationStartsAt?: null
    ): RewardCalculationStartsAtSetEventFilter;

    "Staked(bytes32,address,(uint128,uint128,uint128,uint256,uint256,uint256))"(
      subnetId?: BytesLike | null,
      stakerAddress?: null,
      staker?: null
    ): StakedEventFilter;
    Staked(
      subnetId?: BytesLike | null,
      stakerAddress?: null,
      staker?: null
    ): StakedEventFilter;

    "SubnetEdited(bytes32,(string,address,uint256,uint256,address,uint128,uint128,uint128))"(
      subnetId?: BytesLike | null,
      subnet?: null
    ): SubnetEditedEventFilter;
    SubnetEdited(
      subnetId?: BytesLike | null,
      subnet?: null
    ): SubnetEditedEventFilter;

    "SubnetFeeTreasurySet(bytes32,address,address)"(
      subnetId?: null,
      oldValue?: null,
      newValue?: null
    ): SubnetFeeTreasurySetEventFilter;
    SubnetFeeTreasurySet(
      subnetId?: null,
      oldValue?: null,
      newValue?: null
    ): SubnetFeeTreasurySetEventFilter;

    "SubnetMetadataEdited(bytes32,(string,string,string,string))"(
      subnetId?: BytesLike | null,
      subnetMetadata?: null
    ): SubnetMetadataEditedEventFilter;
    SubnetMetadataEdited(
      subnetId?: BytesLike | null,
      subnetMetadata?: null
    ): SubnetMetadataEditedEventFilter;

    "SubnetMinStakeSet(bytes32,uint256,uint256)"(
      subnetId?: null,
      oldValue?: null,
      newValue?: null
    ): SubnetMinStakeSetEventFilter;
    SubnetMinStakeSet(
      subnetId?: null,
      oldValue?: null,
      newValue?: null
    ): SubnetMinStakeSetEventFilter;

    "SubnetOwnerSet(bytes32,address,address)"(
      subnetId?: null,
      oldValue?: null,
      newValue?: null
    ): SubnetOwnerSetEventFilter;
    SubnetOwnerSet(
      subnetId?: null,
      oldValue?: null,
      newValue?: null
    ): SubnetOwnerSetEventFilter;

    "TreasurySet(address)"(treasury?: null): TreasurySetEventFilter;
    TreasurySet(treasury?: null): TreasurySetEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "Withdrawn(bytes32,address,(uint128,uint128,uint128,uint256,uint256,uint256),uint256)"(
      subnetId?: BytesLike | null,
      stakerAddress?: null,
      staker?: null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      subnetId?: BytesLike | null,
      stakerAddress?: null,
      staker?: null,
      amount?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    BuilderSubnets_init(
      token_: string,
      feeConfig_: string,
      treasury_: string,
      minWithdrawLockPeriodAfterStake_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    FEE_CLAIM_OPERATION(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_WITHDRAW_OPERATION(overrides?: CallOverrides): Promise<BigNumber>;

    buildersPoolData(overrides?: CallOverrides): Promise<BigNumber>;

    buildersSubnets(
      subnetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buildersSubnetsData(
      subnetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buildersSubnetsMetadata(
      subnetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      subnetId_: BytesLike,
      stakerAddress_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    collectPendingRewards(
      subnetId_: BytesLike,
      stakerAddress_: string,
      to_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createSubnet(
      subnet_: IBuilderSubnets.BuildersSubnetStruct,
      metadata_: IBuilderSubnets.BuildersSubnetMetadataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    editSubnetMetadata(
      subnetId_: BytesLike,
      metadata_: IBuilderSubnets.BuildersSubnetMetadataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    feeConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxTotalVirtualStaked(
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodRewardForBuildersPool(
      from_: BigNumberish,
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodRewardForStake(
      virtualStaked_: BigNumberish,
      from_: BigNumberish,
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerFactor(
      from_: BigNumberish,
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakerPowerFactor(
      subnetId_: BytesLike,
      stakerAddress_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakerRewards(
      subnetId_: BytesLike,
      stakerAddress_: string,
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubnetId(name_: string, overrides?: CallOverrides): Promise<BigNumber>;

    isMigrationOver(overrides?: CallOverrides): Promise<BigNumber>;

    maxStakedShareForBuildersPool(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minWithdrawLockPeriodAfterStake(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rewardCalculationStartsAt(overrides?: CallOverrides): Promise<BigNumber>;

    setBuildersPoolData(
      buildersPoolData_: IBuilderSubnets.BuildersPoolDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeConfig(
      feeConfig_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setIsMigrationOver(
      value_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMaxStakedShareForBuildersPool(
      maxStakedShareForBuildersPool_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMinWithdrawLockPeriodAfterStake(
      minWithdrawLockPeriodAfterStake_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRewardCalculationStartsAt(
      rewardCalculationStartsAt_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSubnetFeeTreasury(
      subnetId_: BytesLike,
      newValue_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSubnetMinStake(
      subnetId_: BytesLike,
      newValue_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSubnetOwnership(
      subnetId_: BytesLike,
      newValue_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTreasury(
      treasury_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stake(
      subnetId_: BytesLike,
      stakerAddress_: string,
      amount_: BigNumberish,
      claimLockEnd_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakers(
      subnetId: BytesLike,
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalVirtualStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      subnetId_: BytesLike,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BuilderSubnets_init(
      token_: string,
      feeConfig_: string,
      treasury_: string,
      minWithdrawLockPeriodAfterStake_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    FEE_CLAIM_OPERATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEE_WITHDRAW_OPERATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buildersPoolData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buildersSubnets(
      subnetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buildersSubnetsData(
      subnetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buildersSubnetsMetadata(
      subnetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      subnetId_: BytesLike,
      stakerAddress_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    collectPendingRewards(
      subnetId_: BytesLike,
      stakerAddress_: string,
      to_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createSubnet(
      subnet_: IBuilderSubnets.BuildersSubnetStruct,
      metadata_: IBuilderSubnets.BuildersSubnetMetadataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    editSubnetMetadata(
      subnetId_: BytesLike,
      metadata_: IBuilderSubnets.BuildersSubnetMetadataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    feeConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxTotalVirtualStaked(
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodRewardForBuildersPool(
      from_: BigNumberish,
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodRewardForStake(
      virtualStaked_: BigNumberish,
      from_: BigNumberish,
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPowerFactor(
      from_: BigNumberish,
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakerPowerFactor(
      subnetId_: BytesLike,
      stakerAddress_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakerRewards(
      subnetId_: BytesLike,
      stakerAddress_: string,
      to_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubnetId(
      name_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMigrationOver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxStakedShareForBuildersPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minWithdrawLockPeriodAfterStake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rewardCalculationStartsAt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBuildersPoolData(
      buildersPoolData_: IBuilderSubnets.BuildersPoolDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeConfig(
      feeConfig_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setIsMigrationOver(
      value_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMaxStakedShareForBuildersPool(
      maxStakedShareForBuildersPool_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMinWithdrawLockPeriodAfterStake(
      minWithdrawLockPeriodAfterStake_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRewardCalculationStartsAt(
      rewardCalculationStartsAt_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSubnetFeeTreasury(
      subnetId_: BytesLike,
      newValue_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSubnetMinStake(
      subnetId_: BytesLike,
      newValue_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSubnetOwnership(
      subnetId_: BytesLike,
      newValue_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      treasury_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stake(
      subnetId_: BytesLike,
      stakerAddress_: string,
      amount_: BigNumberish,
      claimLockEnd_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakers(
      subnetId: BytesLike,
      stakerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVirtualStaked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      subnetId_: BytesLike,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
