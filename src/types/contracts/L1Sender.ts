/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IL1Sender {
  export type RewardTokenConfigStruct = {
    gateway: string;
    receiver: string;
    receiverChainId: BigNumberish;
    zroPaymentAddress: string;
    adapterParams: BytesLike;
  };

  export type RewardTokenConfigStructOutput = [
    string,
    string,
    number,
    string,
    string
  ] & {
    gateway: string;
    receiver: string;
    receiverChainId: number;
    zroPaymentAddress: string;
    adapterParams: string;
  };

  export type DepositTokenConfigStruct = {
    token: string;
    gateway: string;
    receiver: string;
  };

  export type DepositTokenConfigStructOutput = [string, string, string] & {
    token: string;
    gateway: string;
    receiver: string;
  };
}

export interface L1SenderInterface extends utils.Interface {
  functions: {
    "L1Sender__init(address,(address,address,uint16,address,bytes),(address,address,address))": FunctionFragment;
    "depositTokenConfig()": FunctionFragment;
    "distribution()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardTokenConfig()": FunctionFragment;
    "sendDepositToken(uint256,uint256,uint256)": FunctionFragment;
    "sendMintMessage(address,uint256,address)": FunctionFragment;
    "setRewardTokenLZParams(address,bytes)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unwrappedDepositToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "L1Sender__init"
      | "depositTokenConfig"
      | "distribution"
      | "owner"
      | "renounceOwnership"
      | "rewardTokenConfig"
      | "sendDepositToken"
      | "sendMintMessage"
      | "setRewardTokenLZParams"
      | "supportsInterface"
      | "transferOwnership"
      | "unwrappedDepositToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "L1Sender__init",
    values: [
      string,
      IL1Sender.RewardTokenConfigStruct,
      IL1Sender.DepositTokenConfigStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTokenConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distribution",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendDepositToken",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMintMessage",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardTokenLZParams",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrappedDepositToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "L1Sender__init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendDepositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMintMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardTokenLZParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwrappedDepositToken",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface L1Sender extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1SenderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    L1Sender__init(
      distribution_: string,
      rewardTokenConfig_: IL1Sender.RewardTokenConfigStruct,
      depositTokenConfig_: IL1Sender.DepositTokenConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositTokenConfig(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        token: string;
        gateway: string;
        receiver: string;
      }
    >;

    distribution(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rewardTokenConfig(
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, string, string] & {
        gateway: string;
        receiver: string;
        receiverChainId: number;
        zroPaymentAddress: string;
        adapterParams: string;
      }
    >;

    sendDepositToken(
      gasLimit_: BigNumberish,
      maxFeePerGas_: BigNumberish,
      maxSubmissionCost_: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    sendMintMessage(
      user_: string,
      amount_: BigNumberish,
      refundTo_: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRewardTokenLZParams(
      zroPaymentAddress_: string,
      adapterParams_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unwrappedDepositToken(overrides?: CallOverrides): Promise<[string]>;
  };

  L1Sender__init(
    distribution_: string,
    rewardTokenConfig_: IL1Sender.RewardTokenConfigStruct,
    depositTokenConfig_: IL1Sender.DepositTokenConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositTokenConfig(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      token: string;
      gateway: string;
      receiver: string;
    }
  >;

  distribution(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rewardTokenConfig(
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, string, string] & {
      gateway: string;
      receiver: string;
      receiverChainId: number;
      zroPaymentAddress: string;
      adapterParams: string;
    }
  >;

  sendDepositToken(
    gasLimit_: BigNumberish,
    maxFeePerGas_: BigNumberish,
    maxSubmissionCost_: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  sendMintMessage(
    user_: string,
    amount_: BigNumberish,
    refundTo_: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRewardTokenLZParams(
    zroPaymentAddress_: string,
    adapterParams_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId_: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unwrappedDepositToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    L1Sender__init(
      distribution_: string,
      rewardTokenConfig_: IL1Sender.RewardTokenConfigStruct,
      depositTokenConfig_: IL1Sender.DepositTokenConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositTokenConfig(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        token: string;
        gateway: string;
        receiver: string;
      }
    >;

    distribution(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardTokenConfig(
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, string, string] & {
        gateway: string;
        receiver: string;
        receiverChainId: number;
        zroPaymentAddress: string;
        adapterParams: string;
      }
    >;

    sendDepositToken(
      gasLimit_: BigNumberish,
      maxFeePerGas_: BigNumberish,
      maxSubmissionCost_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    sendMintMessage(
      user_: string,
      amount_: BigNumberish,
      refundTo_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardTokenLZParams(
      zroPaymentAddress_: string,
      adapterParams_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unwrappedDepositToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    L1Sender__init(
      distribution_: string,
      rewardTokenConfig_: IL1Sender.RewardTokenConfigStruct,
      depositTokenConfig_: IL1Sender.DepositTokenConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositTokenConfig(overrides?: CallOverrides): Promise<BigNumber>;

    distribution(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rewardTokenConfig(overrides?: CallOverrides): Promise<BigNumber>;

    sendDepositToken(
      gasLimit_: BigNumberish,
      maxFeePerGas_: BigNumberish,
      maxSubmissionCost_: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    sendMintMessage(
      user_: string,
      amount_: BigNumberish,
      refundTo_: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    setRewardTokenLZParams(
      zroPaymentAddress_: string,
      adapterParams_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unwrappedDepositToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    L1Sender__init(
      distribution_: string,
      rewardTokenConfig_: IL1Sender.RewardTokenConfigStruct,
      depositTokenConfig_: IL1Sender.DepositTokenConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositTokenConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distribution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rewardTokenConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendDepositToken(
      gasLimit_: BigNumberish,
      maxFeePerGas_: BigNumberish,
      maxSubmissionCost_: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sendMintMessage(
      user_: string,
      amount_: BigNumberish,
      refundTo_: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRewardTokenLZParams(
      zroPaymentAddress_: string,
      adapterParams_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unwrappedDepositToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
