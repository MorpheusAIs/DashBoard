/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IL2TokenReceiver {
  export type SwapParamsStruct = {
    tokenIn: string;
    tokenOut: string;
    fee: BigNumberish;
  };

  export type SwapParamsStructOutput = [string, string, number] & {
    tokenIn: string;
    tokenOut: string;
    fee: number;
  };
}

export interface L2TokenReceiverInterface extends utils.Interface {
  functions: {
    "L2TokenReceiver__init(address,address,(address,address,uint24),(address,address,uint24))": FunctionFragment;
    "collectFees(uint256)": FunctionFragment;
    "decreaseLiquidityCurrentRange(uint256,uint128,uint256,uint256)": FunctionFragment;
    "editParams((address,address,uint24),bool)": FunctionFragment;
    "firstSwapParams()": FunctionFragment;
    "increaseLiquidityCurrentRange(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "nonfungiblePositionManager()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "secondSwapParams()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "swap(uint256,uint256,uint256,uint160,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawToken(address,address,uint256)": FunctionFragment;
    "withdrawTokenId(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "L2TokenReceiver__init"
      | "collectFees"
      | "decreaseLiquidityCurrentRange"
      | "editParams"
      | "firstSwapParams"
      | "increaseLiquidityCurrentRange"
      | "nonfungiblePositionManager"
      | "onERC721Received"
      | "owner"
      | "renounceOwnership"
      | "router"
      | "secondSwapParams"
      | "supportsInterface"
      | "swap"
      | "transferOwnership"
      | "withdrawToken"
      | "withdrawTokenId"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "L2TokenReceiver__init",
    values: [
      string,
      string,
      IL2TokenReceiver.SwapParamsStruct,
      IL2TokenReceiver.SwapParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidityCurrentRange",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editParams",
    values: [IL2TokenReceiver.SwapParamsStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "firstSwapParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidityCurrentRange",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "secondSwapParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokenId",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "L2TokenReceiver__init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidityCurrentRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "editParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "firstSwapParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidityCurrentRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "secondSwapParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokenId",
    data: BytesLike
  ): Result;

  events: {
    "FeesCollected(uint256,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LiquidityDecreased(uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LiquidityIncreased(uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokensSwapped(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeesCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensSwapped"): EventFragment;
}

export interface FeesCollectedEventObject {
  tokenId: BigNumber;
  amount0: BigNumber;
  amount1: BigNumber;
}
export type FeesCollectedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  FeesCollectedEventObject
>;

export type FeesCollectedEventFilter = TypedEventFilter<FeesCollectedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LiquidityDecreasedEventObject {
  tokenId: BigNumber;
  amount0: BigNumber;
  amount1: BigNumber;
  liquidity: BigNumber;
  amount0Min: BigNumber;
  amount1Min: BigNumber;
}
export type LiquidityDecreasedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LiquidityDecreasedEventObject
>;

export type LiquidityDecreasedEventFilter =
  TypedEventFilter<LiquidityDecreasedEvent>;

export interface LiquidityIncreasedEventObject {
  tokenId: BigNumber;
  amount0: BigNumber;
  amount1: BigNumber;
  liquidity: BigNumber;
  amount0Min: BigNumber;
  amount1Min: BigNumber;
}
export type LiquidityIncreasedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LiquidityIncreasedEventObject
>;

export type LiquidityIncreasedEventFilter =
  TypedEventFilter<LiquidityIncreasedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TokensSwappedEventObject {
  tokenIn: string;
  tokenOut: string;
  amountIn: BigNumber;
  amountOut: BigNumber;
  amountOutMinimum: BigNumber;
}
export type TokensSwappedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  TokensSwappedEventObject
>;

export type TokensSwappedEventFilter = TypedEventFilter<TokensSwappedEvent>;

export interface L2TokenReceiver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L2TokenReceiverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    L2TokenReceiver__init(
      router_: string,
      nonfungiblePositionManager_: string,
      firstSwapParams_: IL2TokenReceiver.SwapParamsStruct,
      secondSwapParams_: IL2TokenReceiver.SwapParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    collectFees(
      tokenId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    decreaseLiquidityCurrentRange(
      tokenId_: BigNumberish,
      liquidity_: BigNumberish,
      amount0Min_: BigNumberish,
      amount1Min_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    editParams(
      newParams_: IL2TokenReceiver.SwapParamsStruct,
      isEditFirstParams_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    firstSwapParams(
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        tokenIn: string;
        tokenOut: string;
        fee: number;
      }
    >;

    increaseLiquidityCurrentRange(
      tokenId_: BigNumberish,
      amount0Add_: BigNumberish,
      amount1Add_: BigNumberish,
      amount0Min_: BigNumberish,
      amount1Min_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    secondSwapParams(
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        tokenIn: string;
        tokenOut: string;
        fee: number;
      }
    >;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swap(
      amountIn_: BigNumberish,
      amountOutMinimum_: BigNumberish,
      deadline_: BigNumberish,
      sqrtPriceLimitX96_: BigNumberish,
      isUseFirstSwapParams_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawToken(
      recipient_: string,
      token_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawTokenId(
      recipient_: string,
      token_: string,
      tokenId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  L2TokenReceiver__init(
    router_: string,
    nonfungiblePositionManager_: string,
    firstSwapParams_: IL2TokenReceiver.SwapParamsStruct,
    secondSwapParams_: IL2TokenReceiver.SwapParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  collectFees(
    tokenId_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  decreaseLiquidityCurrentRange(
    tokenId_: BigNumberish,
    liquidity_: BigNumberish,
    amount0Min_: BigNumberish,
    amount1Min_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  editParams(
    newParams_: IL2TokenReceiver.SwapParamsStruct,
    isEditFirstParams_: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  firstSwapParams(
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & {
      tokenIn: string;
      tokenOut: string;
      fee: number;
    }
  >;

  increaseLiquidityCurrentRange(
    tokenId_: BigNumberish,
    amount0Add_: BigNumberish,
    amount1Add_: BigNumberish,
    amount0Min_: BigNumberish,
    amount1Min_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  secondSwapParams(
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & {
      tokenIn: string;
      tokenOut: string;
      fee: number;
    }
  >;

  supportsInterface(
    interfaceId_: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swap(
    amountIn_: BigNumberish,
    amountOutMinimum_: BigNumberish,
    deadline_: BigNumberish,
    sqrtPriceLimitX96_: BigNumberish,
    isUseFirstSwapParams_: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawToken(
    recipient_: string,
    token_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawTokenId(
    recipient_: string,
    token_: string,
    tokenId_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    L2TokenReceiver__init(
      router_: string,
      nonfungiblePositionManager_: string,
      firstSwapParams_: IL2TokenReceiver.SwapParamsStruct,
      secondSwapParams_: IL2TokenReceiver.SwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    collectFees(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0_: BigNumber; amount1_: BigNumber }
    >;

    decreaseLiquidityCurrentRange(
      tokenId_: BigNumberish,
      liquidity_: BigNumberish,
      amount0Min_: BigNumberish,
      amount1Min_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0_: BigNumber; amount1_: BigNumber }
    >;

    editParams(
      newParams_: IL2TokenReceiver.SwapParamsStruct,
      isEditFirstParams_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    firstSwapParams(
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        tokenIn: string;
        tokenOut: string;
        fee: number;
      }
    >;

    increaseLiquidityCurrentRange(
      tokenId_: BigNumberish,
      amount0Add_: BigNumberish,
      amount1Add_: BigNumberish,
      amount0Min_: BigNumberish,
      amount1Min_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity_: BigNumber;
        amount0_: BigNumber;
        amount1_: BigNumber;
      }
    >;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    secondSwapParams(
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        tokenIn: string;
        tokenOut: string;
        fee: number;
      }
    >;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swap(
      amountIn_: BigNumberish,
      amountOutMinimum_: BigNumberish,
      deadline_: BigNumberish,
      sqrtPriceLimitX96_: BigNumberish,
      isUseFirstSwapParams_: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      recipient_: string,
      token_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokenId(
      recipient_: string,
      token_: string,
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeesCollected(uint256,uint256,uint256)"(
      tokenId?: BigNumberish | null,
      amount0?: null,
      amount1?: null
    ): FeesCollectedEventFilter;
    FeesCollected(
      tokenId?: BigNumberish | null,
      amount0?: null,
      amount1?: null
    ): FeesCollectedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LiquidityDecreased(uint256,uint256,uint256,uint256,uint256,uint256)"(
      tokenId?: BigNumberish | null,
      amount0?: null,
      amount1?: null,
      liquidity?: null,
      amount0Min?: null,
      amount1Min?: null
    ): LiquidityDecreasedEventFilter;
    LiquidityDecreased(
      tokenId?: BigNumberish | null,
      amount0?: null,
      amount1?: null,
      liquidity?: null,
      amount0Min?: null,
      amount1Min?: null
    ): LiquidityDecreasedEventFilter;

    "LiquidityIncreased(uint256,uint256,uint256,uint256,uint256,uint256)"(
      tokenId?: BigNumberish | null,
      amount0?: null,
      amount1?: null,
      liquidity?: null,
      amount0Min?: null,
      amount1Min?: null
    ): LiquidityIncreasedEventFilter;
    LiquidityIncreased(
      tokenId?: BigNumberish | null,
      amount0?: null,
      amount1?: null,
      liquidity?: null,
      amount0Min?: null,
      amount1Min?: null
    ): LiquidityIncreasedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TokensSwapped(address,address,uint256,uint256,uint256)"(
      tokenIn?: string | null,
      tokenOut?: string | null,
      amountIn?: null,
      amountOut?: null,
      amountOutMinimum?: null
    ): TokensSwappedEventFilter;
    TokensSwapped(
      tokenIn?: string | null,
      tokenOut?: string | null,
      amountIn?: null,
      amountOut?: null,
      amountOutMinimum?: null
    ): TokensSwappedEventFilter;
  };

  estimateGas: {
    L2TokenReceiver__init(
      router_: string,
      nonfungiblePositionManager_: string,
      firstSwapParams_: IL2TokenReceiver.SwapParamsStruct,
      secondSwapParams_: IL2TokenReceiver.SwapParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    collectFees(
      tokenId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    decreaseLiquidityCurrentRange(
      tokenId_: BigNumberish,
      liquidity_: BigNumberish,
      amount0Min_: BigNumberish,
      amount1Min_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    editParams(
      newParams_: IL2TokenReceiver.SwapParamsStruct,
      isEditFirstParams_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    firstSwapParams(overrides?: CallOverrides): Promise<BigNumber>;

    increaseLiquidityCurrentRange(
      tokenId_: BigNumberish,
      amount0Add_: BigNumberish,
      amount1Add_: BigNumberish,
      amount0Min_: BigNumberish,
      amount1Min_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    secondSwapParams(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      amountIn_: BigNumberish,
      amountOutMinimum_: BigNumberish,
      deadline_: BigNumberish,
      sqrtPriceLimitX96_: BigNumberish,
      isUseFirstSwapParams_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawToken(
      recipient_: string,
      token_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawTokenId(
      recipient_: string,
      token_: string,
      tokenId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    L2TokenReceiver__init(
      router_: string,
      nonfungiblePositionManager_: string,
      firstSwapParams_: IL2TokenReceiver.SwapParamsStruct,
      secondSwapParams_: IL2TokenReceiver.SwapParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    collectFees(
      tokenId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    decreaseLiquidityCurrentRange(
      tokenId_: BigNumberish,
      liquidity_: BigNumberish,
      amount0Min_: BigNumberish,
      amount1Min_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    editParams(
      newParams_: IL2TokenReceiver.SwapParamsStruct,
      isEditFirstParams_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    firstSwapParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseLiquidityCurrentRange(
      tokenId_: BigNumberish,
      amount0Add_: BigNumberish,
      amount1Add_: BigNumberish,
      amount0Min_: BigNumberish,
      amount1Min_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    nonfungiblePositionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    secondSwapParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      amountIn_: BigNumberish,
      amountOutMinimum_: BigNumberish,
      deadline_: BigNumberish,
      sqrtPriceLimitX96_: BigNumberish,
      isUseFirstSwapParams_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      recipient_: string,
      token_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawTokenId(
      recipient_: string,
      token_: string,
      tokenId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
