/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IBuilders {
  export type BuilderPoolStruct = {
    name: string;
    admin: string;
    poolStart: BigNumberish;
    withdrawLockPeriodAfterDeposit: BigNumberish;
    claimLockEnd: BigNumberish;
    minimalDeposit: BigNumberish;
  };

  export type BuilderPoolStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    name: string;
    admin: string;
    poolStart: BigNumber;
    withdrawLockPeriodAfterDeposit: BigNumber;
    claimLockEnd: BigNumber;
    minimalDeposit: BigNumber;
  };
}

export interface BuildersInterface extends utils.Interface {
  functions: {
    "Builders_init(address,address,address,uint128,uint256)": FunctionFragment;
    "builderPools(bytes32)": FunctionFragment;
    "buildersPoolData(bytes32)": FunctionFragment;
    "buildersTreasury()": FunctionFragment;
    "claim(bytes32,address)": FunctionFragment;
    "createBuilderPool((string,address,uint128,uint128,uint128,uint256))": FunctionFragment;
    "deposit(bytes32,uint256)": FunctionFragment;
    "depositToken()": FunctionFragment;
    "editBuilderPool((string,address,uint128,uint128,uint128,uint256))": FunctionFragment;
    "editPoolDeadline()": FunctionFragment;
    "feeConfig()": FunctionFragment;
    "getCurrentBuilderReward(bytes32)": FunctionFragment;
    "getCurrentUserMultiplier(bytes32,address)": FunctionFragment;
    "getLockPeriodMultiplier(uint128,uint128)": FunctionFragment;
    "getNotDistributedRewards()": FunctionFragment;
    "getPoolId(string)": FunctionFragment;
    "minimalWithdrawLockPeriod()": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBuildersTreasury(address)": FunctionFragment;
    "setEditPoolDeadline(uint128)": FunctionFragment;
    "setFeeConfig(address)": FunctionFragment;
    "setMinimalWithdrawLockPeriod(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalPoolData()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "usersData(address,bytes32)": FunctionFragment;
    "withdraw(bytes32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Builders_init"
      | "builderPools"
      | "buildersPoolData"
      | "buildersTreasury"
      | "claim"
      | "createBuilderPool"
      | "deposit"
      | "depositToken"
      | "editBuilderPool"
      | "editPoolDeadline"
      | "feeConfig"
      | "getCurrentBuilderReward"
      | "getCurrentUserMultiplier"
      | "getLockPeriodMultiplier"
      | "getNotDistributedRewards"
      | "getPoolId"
      | "minimalWithdrawLockPeriod"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setBuildersTreasury"
      | "setEditPoolDeadline"
      | "setFeeConfig"
      | "setMinimalWithdrawLockPeriod"
      | "supportsInterface"
      | "totalPoolData"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "usersData"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "Builders_init",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "builderPools",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buildersPoolData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buildersTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createBuilderPool",
    values: [IBuilders.BuilderPoolStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editBuilderPool",
    values: [IBuilders.BuilderPoolStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "editPoolDeadline",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentBuilderReward",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentUserMultiplier",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockPeriodMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNotDistributedRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPoolId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "minimalWithdrawLockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBuildersTreasury",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEditPoolDeadline",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeConfig",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimalWithdrawLockPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPoolData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usersData",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "Builders_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "builderPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildersPoolData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildersTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createBuilderPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editBuilderPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editPoolDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBuilderReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentUserMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockPeriodMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNotDistributedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimalWithdrawLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuildersTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEditPoolDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimalWithdrawLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPoolData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usersData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AdminClaimed(bytes32,address,uint256)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "BuilderPoolCreated(bytes32,(string,address,uint128,uint128,uint128,uint256))": EventFragment;
    "BuilderPoolEdited(bytes32,(string,address,uint128,uint128,uint128,uint256))": EventFragment;
    "BuildersTreasurySet(address)": EventFragment;
    "EditPoolDeadlineSet(uint128)": EventFragment;
    "FeeConfigSet(address)": EventFragment;
    "FeePaid(address,bytes32,uint256,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MinimalWithdrawLockPeriodSet(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "UserDeposited(bytes32,address,uint256)": EventFragment;
    "UserWithdrawn(bytes32,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuilderPoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuilderPoolEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuildersTreasurySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EditPoolDeadlineSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeConfigSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinimalWithdrawLockPeriodSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserWithdrawn"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface AdminClaimedEventObject {
  builderPool: string;
  receiver: string;
  amount: BigNumber;
}
export type AdminClaimedEvent = TypedEvent<
  [string, string, BigNumber],
  AdminClaimedEventObject
>;

export type AdminClaimedEventFilter = TypedEventFilter<AdminClaimedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface BuilderPoolCreatedEventObject {
  builderPoolId: string;
  builderPool: IBuilders.BuilderPoolStructOutput;
}
export type BuilderPoolCreatedEvent = TypedEvent<
  [string, IBuilders.BuilderPoolStructOutput],
  BuilderPoolCreatedEventObject
>;

export type BuilderPoolCreatedEventFilter =
  TypedEventFilter<BuilderPoolCreatedEvent>;

export interface BuilderPoolEditedEventObject {
  builderPoolId: string;
  builderPool: IBuilders.BuilderPoolStructOutput;
}
export type BuilderPoolEditedEvent = TypedEvent<
  [string, IBuilders.BuilderPoolStructOutput],
  BuilderPoolEditedEventObject
>;

export type BuilderPoolEditedEventFilter =
  TypedEventFilter<BuilderPoolEditedEvent>;

export interface BuildersTreasurySetEventObject {
  buildersTreasury: string;
}
export type BuildersTreasurySetEvent = TypedEvent<
  [string],
  BuildersTreasurySetEventObject
>;

export type BuildersTreasurySetEventFilter =
  TypedEventFilter<BuildersTreasurySetEvent>;

export interface EditPoolDeadlineSetEventObject {
  editPoolDeadline: BigNumber;
}
export type EditPoolDeadlineSetEvent = TypedEvent<
  [BigNumber],
  EditPoolDeadlineSetEventObject
>;

export type EditPoolDeadlineSetEventFilter =
  TypedEventFilter<EditPoolDeadlineSetEvent>;

export interface FeeConfigSetEventObject {
  feeConfig: string;
}
export type FeeConfigSetEvent = TypedEvent<[string], FeeConfigSetEventObject>;

export type FeeConfigSetEventFilter = TypedEventFilter<FeeConfigSetEvent>;

export interface FeePaidEventObject {
  user: string;
  operation: string;
  amount: BigNumber;
  treasury: string;
}
export type FeePaidEvent = TypedEvent<
  [string, string, BigNumber, string],
  FeePaidEventObject
>;

export type FeePaidEventFilter = TypedEventFilter<FeePaidEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MinimalWithdrawLockPeriodSetEventObject {
  minimalWithdrawLockPeriod: BigNumber;
}
export type MinimalWithdrawLockPeriodSetEvent = TypedEvent<
  [BigNumber],
  MinimalWithdrawLockPeriodSetEventObject
>;

export type MinimalWithdrawLockPeriodSetEventFilter =
  TypedEventFilter<MinimalWithdrawLockPeriodSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface UserDepositedEventObject {
  builderPool: string;
  user: string;
  amount: BigNumber;
}
export type UserDepositedEvent = TypedEvent<
  [string, string, BigNumber],
  UserDepositedEventObject
>;

export type UserDepositedEventFilter = TypedEventFilter<UserDepositedEvent>;

export interface UserWithdrawnEventObject {
  builderPool: string;
  user: string;
  amount: BigNumber;
}
export type UserWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  UserWithdrawnEventObject
>;

export type UserWithdrawnEventFilter = TypedEventFilter<UserWithdrawnEvent>;

export interface Builders extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BuildersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Builders_init(
      depositToken_: string,
      feeConfig_: string,
      buildersTreasury_: string,
      editPoolDeadline_: BigNumberish,
      minimalWithdrawLockPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    builderPools(
      builderPoolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        name: string;
        admin: string;
        poolStart: BigNumber;
        withdrawLockPeriodAfterDeposit: BigNumber;
        claimLockEnd: BigNumber;
        minimalDeposit: BigNumber;
      }
    >;

    buildersPoolData(
      builderPoolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastDeposit: BigNumber;
        virtualDeposited: BigNumber;
        rate: BigNumber;
        pendingRewards: BigNumber;
      }
    >;

    buildersTreasury(overrides?: CallOverrides): Promise<[string]>;

    claim(
      builderPoolId_: BytesLike,
      receiver_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createBuilderPool(
      builderPool_: IBuilders.BuilderPoolStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deposit(
      builderPoolId_: BytesLike,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositToken(overrides?: CallOverrides): Promise<[string]>;

    editBuilderPool(
      builderPool_: IBuilders.BuilderPoolStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    editPoolDeadline(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeConfig(overrides?: CallOverrides): Promise<[string]>;

    getCurrentBuilderReward(
      builderPoolId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentUserMultiplier(
      builderPoolId_: BytesLike,
      user_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLockPeriodMultiplier(
      lockStart_: BigNumberish,
      lockEnd_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNotDistributedRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolId(
      builderPoolName_: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    minimalWithdrawLockPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBuildersTreasury(
      buildersTreasury_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEditPoolDeadline(
      editPoolDeadline_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeConfig(
      feeConfig_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMinimalWithdrawLockPeriod(
      minimalWithdrawLockPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalPoolData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        distributedRewards: BigNumber;
        rate: BigNumber;
        totalVirtualDeposited: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    usersData(
      user: string,
      builderPoolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastDeposit: BigNumber;
        claimLockStart: BigNumber;
        deposited: BigNumber;
        virtualDeposited: BigNumber;
      }
    >;

    withdraw(
      builderPoolId_: BytesLike,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  Builders_init(
    depositToken_: string,
    feeConfig_: string,
    buildersTreasury_: string,
    editPoolDeadline_: BigNumberish,
    minimalWithdrawLockPeriod_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  builderPools(
    builderPoolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      name: string;
      admin: string;
      poolStart: BigNumber;
      withdrawLockPeriodAfterDeposit: BigNumber;
      claimLockEnd: BigNumber;
      minimalDeposit: BigNumber;
    }
  >;

  buildersPoolData(
    builderPoolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      lastDeposit: BigNumber;
      virtualDeposited: BigNumber;
      rate: BigNumber;
      pendingRewards: BigNumber;
    }
  >;

  buildersTreasury(overrides?: CallOverrides): Promise<string>;

  claim(
    builderPoolId_: BytesLike,
    receiver_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createBuilderPool(
    builderPool_: IBuilders.BuilderPoolStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deposit(
    builderPoolId_: BytesLike,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositToken(overrides?: CallOverrides): Promise<string>;

  editBuilderPool(
    builderPool_: IBuilders.BuilderPoolStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  editPoolDeadline(overrides?: CallOverrides): Promise<BigNumber>;

  feeConfig(overrides?: CallOverrides): Promise<string>;

  getCurrentBuilderReward(
    builderPoolId_: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentUserMultiplier(
    builderPoolId_: BytesLike,
    user_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLockPeriodMultiplier(
    lockStart_: BigNumberish,
    lockEnd_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNotDistributedRewards(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolId(
    builderPoolName_: string,
    overrides?: CallOverrides
  ): Promise<string>;

  minimalWithdrawLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setBuildersTreasury(
    buildersTreasury_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEditPoolDeadline(
    editPoolDeadline_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeConfig(
    feeConfig_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMinimalWithdrawLockPeriod(
    minimalWithdrawLockPeriod_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId_: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalPoolData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      distributedRewards: BigNumber;
      rate: BigNumber;
      totalVirtualDeposited: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  usersData(
    user: string,
    builderPoolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      lastDeposit: BigNumber;
      claimLockStart: BigNumber;
      deposited: BigNumber;
      virtualDeposited: BigNumber;
    }
  >;

  withdraw(
    builderPoolId_: BytesLike,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    Builders_init(
      depositToken_: string,
      feeConfig_: string,
      buildersTreasury_: string,
      editPoolDeadline_: BigNumberish,
      minimalWithdrawLockPeriod_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    builderPools(
      builderPoolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        name: string;
        admin: string;
        poolStart: BigNumber;
        withdrawLockPeriodAfterDeposit: BigNumber;
        claimLockEnd: BigNumber;
        minimalDeposit: BigNumber;
      }
    >;

    buildersPoolData(
      builderPoolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastDeposit: BigNumber;
        virtualDeposited: BigNumber;
        rate: BigNumber;
        pendingRewards: BigNumber;
      }
    >;

    buildersTreasury(overrides?: CallOverrides): Promise<string>;

    claim(
      builderPoolId_: BytesLike,
      receiver_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createBuilderPool(
      builderPool_: IBuilders.BuilderPoolStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      builderPoolId_: BytesLike,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositToken(overrides?: CallOverrides): Promise<string>;

    editBuilderPool(
      builderPool_: IBuilders.BuilderPoolStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    editPoolDeadline(overrides?: CallOverrides): Promise<BigNumber>;

    feeConfig(overrides?: CallOverrides): Promise<string>;

    getCurrentBuilderReward(
      builderPoolId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentUserMultiplier(
      builderPoolId_: BytesLike,
      user_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockPeriodMultiplier(
      lockStart_: BigNumberish,
      lockEnd_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNotDistributedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolId(
      builderPoolName_: string,
      overrides?: CallOverrides
    ): Promise<string>;

    minimalWithdrawLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBuildersTreasury(
      buildersTreasury_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEditPoolDeadline(
      editPoolDeadline_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeConfig(feeConfig_: string, overrides?: CallOverrides): Promise<void>;

    setMinimalWithdrawLockPeriod(
      minimalWithdrawLockPeriod_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalPoolData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        distributedRewards: BigNumber;
        rate: BigNumber;
        totalVirtualDeposited: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    usersData(
      user: string,
      builderPoolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastDeposit: BigNumber;
        claimLockStart: BigNumber;
        deposited: BigNumber;
        virtualDeposited: BigNumber;
      }
    >;

    withdraw(
      builderPoolId_: BytesLike,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AdminClaimed(bytes32,address,uint256)"(
      builderPool?: BytesLike | null,
      receiver?: null,
      amount?: null
    ): AdminClaimedEventFilter;
    AdminClaimed(
      builderPool?: BytesLike | null,
      receiver?: null,
      amount?: null
    ): AdminClaimedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "BuilderPoolCreated(bytes32,(string,address,uint128,uint128,uint128,uint256))"(
      builderPoolId?: BytesLike | null,
      builderPool?: null
    ): BuilderPoolCreatedEventFilter;
    BuilderPoolCreated(
      builderPoolId?: BytesLike | null,
      builderPool?: null
    ): BuilderPoolCreatedEventFilter;

    "BuilderPoolEdited(bytes32,(string,address,uint128,uint128,uint128,uint256))"(
      builderPoolId?: BytesLike | null,
      builderPool?: null
    ): BuilderPoolEditedEventFilter;
    BuilderPoolEdited(
      builderPoolId?: BytesLike | null,
      builderPool?: null
    ): BuilderPoolEditedEventFilter;

    "BuildersTreasurySet(address)"(
      buildersTreasury?: null
    ): BuildersTreasurySetEventFilter;
    BuildersTreasurySet(
      buildersTreasury?: null
    ): BuildersTreasurySetEventFilter;

    "EditPoolDeadlineSet(uint128)"(
      editPoolDeadline?: null
    ): EditPoolDeadlineSetEventFilter;
    EditPoolDeadlineSet(
      editPoolDeadline?: null
    ): EditPoolDeadlineSetEventFilter;

    "FeeConfigSet(address)"(feeConfig?: null): FeeConfigSetEventFilter;
    FeeConfigSet(feeConfig?: null): FeeConfigSetEventFilter;

    "FeePaid(address,bytes32,uint256,address)"(
      user?: string | null,
      operation?: BytesLike | null,
      amount?: null,
      treasury?: null
    ): FeePaidEventFilter;
    FeePaid(
      user?: string | null,
      operation?: BytesLike | null,
      amount?: null,
      treasury?: null
    ): FeePaidEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MinimalWithdrawLockPeriodSet(uint256)"(
      minimalWithdrawLockPeriod?: null
    ): MinimalWithdrawLockPeriodSetEventFilter;
    MinimalWithdrawLockPeriodSet(
      minimalWithdrawLockPeriod?: null
    ): MinimalWithdrawLockPeriodSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "UserDeposited(bytes32,address,uint256)"(
      builderPool?: BytesLike | null,
      user?: string | null,
      amount?: null
    ): UserDepositedEventFilter;
    UserDeposited(
      builderPool?: BytesLike | null,
      user?: string | null,
      amount?: null
    ): UserDepositedEventFilter;

    "UserWithdrawn(bytes32,address,uint256)"(
      builderPool?: BytesLike | null,
      user?: string | null,
      amount?: null
    ): UserWithdrawnEventFilter;
    UserWithdrawn(
      builderPool?: BytesLike | null,
      user?: string | null,
      amount?: null
    ): UserWithdrawnEventFilter;
  };

  estimateGas: {
    Builders_init(
      depositToken_: string,
      feeConfig_: string,
      buildersTreasury_: string,
      editPoolDeadline_: BigNumberish,
      minimalWithdrawLockPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    builderPools(
      builderPoolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buildersPoolData(
      builderPoolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buildersTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      builderPoolId_: BytesLike,
      receiver_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createBuilderPool(
      builderPool_: IBuilders.BuilderPoolStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deposit(
      builderPoolId_: BytesLike,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<BigNumber>;

    editBuilderPool(
      builderPool_: IBuilders.BuilderPoolStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    editPoolDeadline(overrides?: CallOverrides): Promise<BigNumber>;

    feeConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBuilderReward(
      builderPoolId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentUserMultiplier(
      builderPoolId_: BytesLike,
      user_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockPeriodMultiplier(
      lockStart_: BigNumberish,
      lockEnd_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNotDistributedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolId(
      builderPoolName_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimalWithdrawLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setBuildersTreasury(
      buildersTreasury_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEditPoolDeadline(
      editPoolDeadline_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeConfig(
      feeConfig_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMinimalWithdrawLockPeriod(
      minimalWithdrawLockPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPoolData(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    usersData(
      user: string,
      builderPoolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      builderPoolId_: BytesLike,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Builders_init(
      depositToken_: string,
      feeConfig_: string,
      buildersTreasury_: string,
      editPoolDeadline_: BigNumberish,
      minimalWithdrawLockPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    builderPools(
      builderPoolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buildersPoolData(
      builderPoolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buildersTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      builderPoolId_: BytesLike,
      receiver_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createBuilderPool(
      builderPool_: IBuilders.BuilderPoolStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deposit(
      builderPoolId_: BytesLike,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    editBuilderPool(
      builderPool_: IBuilders.BuilderPoolStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    editPoolDeadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentBuilderReward(
      builderPoolId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentUserMultiplier(
      builderPoolId_: BytesLike,
      user_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockPeriodMultiplier(
      lockStart_: BigNumberish,
      lockEnd_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNotDistributedRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolId(
      builderPoolName_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimalWithdrawLockPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBuildersTreasury(
      buildersTreasury_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEditPoolDeadline(
      editPoolDeadline_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeConfig(
      feeConfig_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMinimalWithdrawLockPeriod(
      minimalWithdrawLockPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPoolData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    usersData(
      user: string,
      builderPoolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      builderPoolId_: BytesLike,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
