/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface SubnetInterface extends utils.Interface {
  functions: {
    "ProvidersDelegate_init(address,address,uint256,string,string,uint128)": FunctionFragment;
    "claim(address,uint256)": FunctionFragment;
    "deleteModelBids(bytes32[])": FunctionFragment;
    "deregistrationOpensAt()": FunctionFragment;
    "endpoint()": FunctionFragment;
    "fee()": FunctionFragment;
    "feeTreasury()": FunctionFragment;
    "getCurrentRate()": FunctionFragment;
    "getCurrentStakerRewards(address)": FunctionFragment;
    "isDeregisterAvailable()": FunctionFragment;
    "isStakeClosed()": FunctionFragment;
    "lastContractBalance()": FunctionFragment;
    "lumerinDiamond()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "postModelBid(bytes32,uint256)": FunctionFragment;
    "providerDeregister(bytes32[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "restake(address,uint256)": FunctionFragment;
    "setEndpoint(string)": FunctionFragment;
    "setFeeTreasury(address)": FunctionFragment;
    "setIsRestakeDisabled(bool)": FunctionFragment;
    "setIsStakeClosed(bool)": FunctionFragment;
    "setName(string)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakers(address)": FunctionFragment;
    "token()": FunctionFragment;
    "totalRate()": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ProvidersDelegate_init"
      | "claim"
      | "deleteModelBids"
      | "deregistrationOpensAt"
      | "endpoint"
      | "fee"
      | "feeTreasury"
      | "getCurrentRate"
      | "getCurrentStakerRewards"
      | "isDeregisterAvailable"
      | "isStakeClosed"
      | "lastContractBalance"
      | "lumerinDiamond"
      | "name"
      | "owner"
      | "postModelBid"
      | "providerDeregister"
      | "renounceOwnership"
      | "restake"
      | "setEndpoint"
      | "setFeeTreasury"
      | "setIsRestakeDisabled"
      | "setIsStakeClosed"
      | "setName"
      | "stake"
      | "stakers"
      | "token"
      | "totalRate"
      | "totalStaked"
      | "transferOwnership"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ProvidersDelegate_init",
    values: [string, string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteModelBids",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deregistrationOpensAt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentStakerRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isDeregisterAvailable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isStakeClosed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lumerinDiamond",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "postModelBid",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "providerDeregister",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setEndpoint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFeeTreasury",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsRestakeDisabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsStakeClosed",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setName", values: [string]): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "stakers", values: [string]): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ProvidersDelegate_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteModelBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregistrationOpensAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentStakerRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDeregisterAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStakeClosed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lumerinDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postModelBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "providerDeregister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "restake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsRestakeDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsStakeClosed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Claimed(address,uint256,uint256)": EventFragment;
    "EndpointUpdated(string)": EventFragment;
    "FeeClaimed(address,uint256)": EventFragment;
    "FeeTreasuryUpdated(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "IsRestakeDisabledUpdated(address,bool)": EventFragment;
    "IsStakeClosedUpdated(bool)": EventFragment;
    "NameUpdated(string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Staked(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndpointUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeTreasuryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IsRestakeDisabledUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IsStakeClosedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
}

export interface ClaimedEventObject {
  staker: string;
  claimed: BigNumber;
  rate: BigNumber;
}
export type ClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ClaimedEventObject
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface EndpointUpdatedEventObject {
  endpoint: string;
}
export type EndpointUpdatedEvent = TypedEvent<
  [string],
  EndpointUpdatedEventObject
>;

export type EndpointUpdatedEventFilter = TypedEventFilter<EndpointUpdatedEvent>;

export interface FeeClaimedEventObject {
  feeTreasury: string;
  feeAmount: BigNumber;
}
export type FeeClaimedEvent = TypedEvent<
  [string, BigNumber],
  FeeClaimedEventObject
>;

export type FeeClaimedEventFilter = TypedEventFilter<FeeClaimedEvent>;

export interface FeeTreasuryUpdatedEventObject {
  feeTreasury: string;
}
export type FeeTreasuryUpdatedEvent = TypedEvent<
  [string],
  FeeTreasuryUpdatedEventObject
>;

export type FeeTreasuryUpdatedEventFilter =
  TypedEventFilter<FeeTreasuryUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface IsRestakeDisabledUpdatedEventObject {
  staker: string;
  isRestakeDisabled: boolean;
}
export type IsRestakeDisabledUpdatedEvent = TypedEvent<
  [string, boolean],
  IsRestakeDisabledUpdatedEventObject
>;

export type IsRestakeDisabledUpdatedEventFilter =
  TypedEventFilter<IsRestakeDisabledUpdatedEvent>;

export interface IsStakeClosedUpdatedEventObject {
  isStakeClosed: boolean;
}
export type IsStakeClosedUpdatedEvent = TypedEvent<
  [boolean],
  IsStakeClosedUpdatedEventObject
>;

export type IsStakeClosedUpdatedEventFilter =
  TypedEventFilter<IsStakeClosedUpdatedEvent>;

export interface NameUpdatedEventObject {
  name: string;
}
export type NameUpdatedEvent = TypedEvent<[string], NameUpdatedEventObject>;

export type NameUpdatedEventFilter = TypedEventFilter<NameUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StakedEventObject {
  staker: string;
  staked: BigNumber;
  totalStaked: BigNumber;
  rate: BigNumber;
}
export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface Subnet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SubnetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ProvidersDelegate_init(
      lumerinDiamond_: string,
      feeTreasury_: string,
      fee_: BigNumberish,
      name_: string,
      endpoint_: string,
      deregistrationOpensAt_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claim(
      staker_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deleteModelBids(
      bidIds_: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deregistrationOpensAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    endpoint(overrides?: CallOverrides): Promise<[string]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeTreasury(overrides?: CallOverrides): Promise<[string]>;

    getCurrentRate(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getCurrentStakerRewards(
      staker_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isDeregisterAvailable(overrides?: CallOverrides): Promise<[boolean]>;

    isStakeClosed(overrides?: CallOverrides): Promise<[boolean]>;

    lastContractBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    lumerinDiamond(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    postModelBid(
      modelId_: BytesLike,
      pricePerSecond_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    providerDeregister(
      bidIds_: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    restake(
      staker_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEndpoint(
      endpoint_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeTreasury(
      feeTreasury_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setIsRestakeDisabled(
      isRestakeDisabled_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setIsStakeClosed(
      isStakeClosed_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setName(
      name_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stake(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        staked: BigNumber;
        claimed: BigNumber;
        rate: BigNumber;
        pendingRewards: BigNumber;
        isRestakeDisabled: boolean;
      }
    >;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ProvidersDelegate_init(
    lumerinDiamond_: string,
    feeTreasury_: string,
    fee_: BigNumberish,
    name_: string,
    endpoint_: string,
    deregistrationOpensAt_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claim(
    staker_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deleteModelBids(
    bidIds_: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deregistrationOpensAt(overrides?: CallOverrides): Promise<BigNumber>;

  endpoint(overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  feeTreasury(overrides?: CallOverrides): Promise<string>;

  getCurrentRate(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  getCurrentStakerRewards(
    staker_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isDeregisterAvailable(overrides?: CallOverrides): Promise<boolean>;

  isStakeClosed(overrides?: CallOverrides): Promise<boolean>;

  lastContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

  lumerinDiamond(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  postModelBid(
    modelId_: BytesLike,
    pricePerSecond_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  providerDeregister(
    bidIds_: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  restake(
    staker_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEndpoint(
    endpoint_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeTreasury(
    feeTreasury_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setIsRestakeDisabled(
    isRestakeDisabled_: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setIsStakeClosed(
    isStakeClosed_: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setName(
    name_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stake(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      staked: BigNumber;
      claimed: BigNumber;
      rate: BigNumber;
      pendingRewards: BigNumber;
      isRestakeDisabled: boolean;
    }
  >;

  token(overrides?: CallOverrides): Promise<string>;

  totalRate(overrides?: CallOverrides): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ProvidersDelegate_init(
      lumerinDiamond_: string,
      feeTreasury_: string,
      fee_: BigNumberish,
      name_: string,
      endpoint_: string,
      deregistrationOpensAt_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      staker_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteModelBids(
      bidIds_: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    deregistrationOpensAt(overrides?: CallOverrides): Promise<BigNumber>;

    endpoint(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeTreasury(overrides?: CallOverrides): Promise<string>;

    getCurrentRate(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getCurrentStakerRewards(
      staker_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDeregisterAvailable(overrides?: CallOverrides): Promise<boolean>;

    isStakeClosed(overrides?: CallOverrides): Promise<boolean>;

    lastContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    lumerinDiamond(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    postModelBid(
      modelId_: BytesLike,
      pricePerSecond_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    providerDeregister(
      bidIds_: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    restake(
      staker_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEndpoint(endpoint_: string, overrides?: CallOverrides): Promise<void>;

    setFeeTreasury(
      feeTreasury_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsRestakeDisabled(
      isRestakeDisabled_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsStakeClosed(
      isStakeClosed_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setName(name_: string, overrides?: CallOverrides): Promise<void>;

    stake(amount_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        staked: BigNumber;
        claimed: BigNumber;
        rate: BigNumber;
        pendingRewards: BigNumber;
        isRestakeDisabled: boolean;
      }
    >;

    token(overrides?: CallOverrides): Promise<string>;

    totalRate(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Claimed(address,uint256,uint256)"(
      staker?: null,
      claimed?: null,
      rate?: null
    ): ClaimedEventFilter;
    Claimed(staker?: null, claimed?: null, rate?: null): ClaimedEventFilter;

    "EndpointUpdated(string)"(endpoint?: null): EndpointUpdatedEventFilter;
    EndpointUpdated(endpoint?: null): EndpointUpdatedEventFilter;

    "FeeClaimed(address,uint256)"(
      feeTreasury?: null,
      feeAmount?: null
    ): FeeClaimedEventFilter;
    FeeClaimed(feeTreasury?: null, feeAmount?: null): FeeClaimedEventFilter;

    "FeeTreasuryUpdated(address)"(
      feeTreasury?: null
    ): FeeTreasuryUpdatedEventFilter;
    FeeTreasuryUpdated(feeTreasury?: null): FeeTreasuryUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "IsRestakeDisabledUpdated(address,bool)"(
      staker?: null,
      isRestakeDisabled?: null
    ): IsRestakeDisabledUpdatedEventFilter;
    IsRestakeDisabledUpdated(
      staker?: null,
      isRestakeDisabled?: null
    ): IsRestakeDisabledUpdatedEventFilter;

    "IsStakeClosedUpdated(bool)"(
      isStakeClosed?: null
    ): IsStakeClosedUpdatedEventFilter;
    IsStakeClosedUpdated(isStakeClosed?: null): IsStakeClosedUpdatedEventFilter;

    "NameUpdated(string)"(name?: null): NameUpdatedEventFilter;
    NameUpdated(name?: null): NameUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Staked(address,uint256,uint256,uint256)"(
      staker?: null,
      staked?: null,
      totalStaked?: null,
      rate?: null
    ): StakedEventFilter;
    Staked(
      staker?: null,
      staked?: null,
      totalStaked?: null,
      rate?: null
    ): StakedEventFilter;
  };

  estimateGas: {
    ProvidersDelegate_init(
      lumerinDiamond_: string,
      feeTreasury_: string,
      fee_: BigNumberish,
      name_: string,
      endpoint_: string,
      deregistrationOpensAt_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claim(
      staker_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deleteModelBids(
      bidIds_: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deregistrationOpensAt(overrides?: CallOverrides): Promise<BigNumber>;

    endpoint(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRate(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentStakerRewards(
      staker_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDeregisterAvailable(overrides?: CallOverrides): Promise<BigNumber>;

    isStakeClosed(overrides?: CallOverrides): Promise<BigNumber>;

    lastContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    lumerinDiamond(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    postModelBid(
      modelId_: BytesLike,
      pricePerSecond_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    providerDeregister(
      bidIds_: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    restake(
      staker_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEndpoint(
      endpoint_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeTreasury(
      feeTreasury_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setIsRestakeDisabled(
      isRestakeDisabled_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setIsStakeClosed(
      isStakeClosed_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setName(
      name_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stake(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalRate(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ProvidersDelegate_init(
      lumerinDiamond_: string,
      feeTreasury_: string,
      fee_: BigNumberish,
      name_: string,
      endpoint_: string,
      deregistrationOpensAt_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claim(
      staker_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deleteModelBids(
      bidIds_: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deregistrationOpensAt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentStakerRewards(
      staker_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDeregisterAvailable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStakeClosed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastContractBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lumerinDiamond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postModelBid(
      modelId_: BytesLike,
      pricePerSecond_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    providerDeregister(
      bidIds_: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    restake(
      staker_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEndpoint(
      endpoint_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeTreasury(
      feeTreasury_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setIsRestakeDisabled(
      isRestakeDisabled_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setIsStakeClosed(
      isStakeClosed_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setName(
      name_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stake(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
