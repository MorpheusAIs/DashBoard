/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IDistribution {
  export type PoolStruct = {
    payoutStart: BigNumberish;
    decreaseInterval: BigNumberish;
    withdrawLockPeriod: BigNumberish;
    claimLockPeriod: BigNumberish;
    withdrawLockPeriodAfterStake: BigNumberish;
    initialReward: BigNumberish;
    rewardDecrease: BigNumberish;
    minimalStake: BigNumberish;
    isPublic: boolean;
  };

  export type PoolStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    payoutStart: BigNumber;
    decreaseInterval: BigNumber;
    withdrawLockPeriod: BigNumber;
    claimLockPeriod: BigNumber;
    withdrawLockPeriodAfterStake: BigNumber;
    initialReward: BigNumber;
    rewardDecrease: BigNumber;
    minimalStake: BigNumber;
    isPublic: boolean;
  };
}

export interface ERC1967ProxyInterface extends utils.Interface {
  functions: {
    "Distribution_init(address,address,(uint128,uint128,uint128,uint128,uint128,uint256,uint256,uint256,bool)[])": FunctionFragment;
    "bridgeOverplus(uint256,uint256,uint256)": FunctionFragment;
    "claim(uint256,address)": FunctionFragment;
    "createPool((uint128,uint128,uint128,uint128,uint128,uint256,uint256,uint256,bool))": FunctionFragment;
    "depositToken()": FunctionFragment;
    "editPool(uint256,(uint128,uint128,uint128,uint128,uint128,uint256,uint256,uint256,bool))": FunctionFragment;
    "getCurrentUserReward(uint256,address)": FunctionFragment;
    "getPeriodReward(uint256,uint128,uint128)": FunctionFragment;
    "isNotUpgradeable()": FunctionFragment;
    "l1Sender()": FunctionFragment;
    "manageUsersInPrivatePool(uint256,address[],uint256[])": FunctionFragment;
    "overplus()": FunctionFragment;
    "owner()": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "poolsData(uint256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeUpgradeability()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stake(uint256,uint256)": FunctionFragment;
    "totalDepositedInPublicPools()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "usersData(address,uint256)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Distribution_init"
      | "bridgeOverplus"
      | "claim"
      | "createPool"
      | "depositToken"
      | "editPool"
      | "getCurrentUserReward"
      | "getPeriodReward"
      | "isNotUpgradeable"
      | "l1Sender"
      | "manageUsersInPrivatePool"
      | "overplus"
      | "owner"
      | "pools"
      | "poolsData"
      | "proxiableUUID"
      | "removeUpgradeability"
      | "renounceOwnership"
      | "stake"
      | "totalDepositedInPublicPools"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "usersData"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "Distribution_init",
    values: [string, string, IDistribution.PoolStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeOverplus",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [IDistribution.PoolStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editPool",
    values: [BigNumberish, IDistribution.PoolStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentUserReward",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodReward",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isNotUpgradeable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "l1Sender", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "manageUsersInPrivatePool",
    values: [BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "overplus", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "poolsData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeUpgradeability",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDepositedInPublicPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usersData",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "Distribution_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeOverplus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "editPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentUserReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNotUpgradeable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l1Sender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "manageUsersInPrivatePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "overplus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolsData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeUpgradeability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDepositedInPublicPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usersData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OverplusBridged(uint256,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolCreated(uint256,(uint128,uint128,uint128,uint128,uint128,uint256,uint256,uint256,bool))": EventFragment;
    "PoolEdited(uint256,(uint128,uint128,uint128,uint128,uint128,uint256,uint256,uint256,bool))": EventFragment;
    "Upgraded(address)": EventFragment;
    "UserClaimed(uint256,address,uint256)": EventFragment;
    "UserStaked(uint256,address,uint256)": EventFragment;
    "UserWithdrawn(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OverplusBridged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserWithdrawn"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OverplusBridgedEventObject {
  amount: BigNumber;
  uniqueId: string;
}
export type OverplusBridgedEvent = TypedEvent<
  [BigNumber, string],
  OverplusBridgedEventObject
>;

export type OverplusBridgedEventFilter = TypedEventFilter<OverplusBridgedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PoolCreatedEventObject {
  poolId: BigNumber;
  pool: IDistribution.PoolStructOutput;
}
export type PoolCreatedEvent = TypedEvent<
  [BigNumber, IDistribution.PoolStructOutput],
  PoolCreatedEventObject
>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface PoolEditedEventObject {
  poolId: BigNumber;
  pool: IDistribution.PoolStructOutput;
}
export type PoolEditedEvent = TypedEvent<
  [BigNumber, IDistribution.PoolStructOutput],
  PoolEditedEventObject
>;

export type PoolEditedEventFilter = TypedEventFilter<PoolEditedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface UserClaimedEventObject {
  poolId: BigNumber;
  user: string;
  amount: BigNumber;
}
export type UserClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  UserClaimedEventObject
>;

export type UserClaimedEventFilter = TypedEventFilter<UserClaimedEvent>;

export interface UserStakedEventObject {
  poolId: BigNumber;
  user: string;
  amount: BigNumber;
}
export type UserStakedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  UserStakedEventObject
>;

export type UserStakedEventFilter = TypedEventFilter<UserStakedEvent>;

export interface UserWithdrawnEventObject {
  poolId: BigNumber;
  user: string;
  amount: BigNumber;
}
export type UserWithdrawnEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  UserWithdrawnEventObject
>;

export type UserWithdrawnEventFilter = TypedEventFilter<UserWithdrawnEvent>;

export interface ERC1967Proxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC1967ProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Distribution_init(
      depositToken_: string,
      l1Sender_: string,
      poolsInfo_: IDistribution.PoolStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    bridgeOverplus(
      gasLimit_: BigNumberish,
      maxFeePerGas_: BigNumberish,
      maxSubmissionCost_: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    claim(
      poolId_: BigNumberish,
      user_: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    createPool(
      pool_: IDistribution.PoolStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositToken(overrides?: CallOverrides): Promise<[string]>;

    editPool(
      poolId_: BigNumberish,
      pool_: IDistribution.PoolStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getCurrentUserReward(
      poolId_: BigNumberish,
      user_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPeriodReward(
      poolId_: BigNumberish,
      startTime_: BigNumberish,
      endTime_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isNotUpgradeable(overrides?: CallOverrides): Promise<[boolean]>;

    l1Sender(overrides?: CallOverrides): Promise<[string]>;

    manageUsersInPrivatePool(
      poolId_: BigNumberish,
      users_: string[],
      amounts_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    overplus(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        payoutStart: BigNumber;
        decreaseInterval: BigNumber;
        withdrawLockPeriod: BigNumber;
        claimLockPeriod: BigNumber;
        withdrawLockPeriodAfterStake: BigNumber;
        initialReward: BigNumber;
        rewardDecrease: BigNumber;
        minimalStake: BigNumber;
        isPublic: boolean;
      }
    >;

    poolsData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lastUpdate: BigNumber;
        rate: BigNumber;
        totalDeposited: BigNumber;
      }
    >;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeUpgradeability(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stake(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalDepositedInPublicPools(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    usersData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastStake: BigNumber;
        deposited: BigNumber;
        rate: BigNumber;
        pendingRewards: BigNumber;
      }
    >;

    withdraw(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  Distribution_init(
    depositToken_: string,
    l1Sender_: string,
    poolsInfo_: IDistribution.PoolStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  bridgeOverplus(
    gasLimit_: BigNumberish,
    maxFeePerGas_: BigNumberish,
    maxSubmissionCost_: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  claim(
    poolId_: BigNumberish,
    user_: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  createPool(
    pool_: IDistribution.PoolStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositToken(overrides?: CallOverrides): Promise<string>;

  editPool(
    poolId_: BigNumberish,
    pool_: IDistribution.PoolStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getCurrentUserReward(
    poolId_: BigNumberish,
    user_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPeriodReward(
    poolId_: BigNumberish,
    startTime_: BigNumberish,
    endTime_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isNotUpgradeable(overrides?: CallOverrides): Promise<boolean>;

  l1Sender(overrides?: CallOverrides): Promise<string>;

  manageUsersInPrivatePool(
    poolId_: BigNumberish,
    users_: string[],
    amounts_: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  overplus(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pools(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      payoutStart: BigNumber;
      decreaseInterval: BigNumber;
      withdrawLockPeriod: BigNumber;
      claimLockPeriod: BigNumber;
      withdrawLockPeriodAfterStake: BigNumber;
      initialReward: BigNumber;
      rewardDecrease: BigNumber;
      minimalStake: BigNumber;
      isPublic: boolean;
    }
  >;

  poolsData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      lastUpdate: BigNumber;
      rate: BigNumber;
      totalDeposited: BigNumber;
    }
  >;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeUpgradeability(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stake(
    poolId_: BigNumberish,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalDepositedInPublicPools(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  usersData(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      lastStake: BigNumber;
      deposited: BigNumber;
      rate: BigNumber;
      pendingRewards: BigNumber;
    }
  >;

  withdraw(
    poolId_: BigNumberish,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    Distribution_init(
      depositToken_: string,
      l1Sender_: string,
      poolsInfo_: IDistribution.PoolStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeOverplus(
      gasLimit_: BigNumberish,
      maxFeePerGas_: BigNumberish,
      maxSubmissionCost_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    claim(
      poolId_: BigNumberish,
      user_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createPool(
      pool_: IDistribution.PoolStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositToken(overrides?: CallOverrides): Promise<string>;

    editPool(
      poolId_: BigNumberish,
      pool_: IDistribution.PoolStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentUserReward(
      poolId_: BigNumberish,
      user_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodReward(
      poolId_: BigNumberish,
      startTime_: BigNumberish,
      endTime_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNotUpgradeable(overrides?: CallOverrides): Promise<boolean>;

    l1Sender(overrides?: CallOverrides): Promise<string>;

    manageUsersInPrivatePool(
      poolId_: BigNumberish,
      users_: string[],
      amounts_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    overplus(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        payoutStart: BigNumber;
        decreaseInterval: BigNumber;
        withdrawLockPeriod: BigNumber;
        claimLockPeriod: BigNumber;
        withdrawLockPeriodAfterStake: BigNumber;
        initialReward: BigNumber;
        rewardDecrease: BigNumber;
        minimalStake: BigNumber;
        isPublic: boolean;
      }
    >;

    poolsData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lastUpdate: BigNumber;
        rate: BigNumber;
        totalDeposited: BigNumber;
      }
    >;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeUpgradeability(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    stake(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalDepositedInPublicPools(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    usersData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastStake: BigNumber;
        deposited: BigNumber;
        rate: BigNumber;
        pendingRewards: BigNumber;
      }
    >;

    withdraw(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OverplusBridged(uint256,bytes)"(
      amount?: null,
      uniqueId?: null
    ): OverplusBridgedEventFilter;
    OverplusBridged(amount?: null, uniqueId?: null): OverplusBridgedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PoolCreated(uint256,(uint128,uint128,uint128,uint128,uint128,uint256,uint256,uint256,bool))"(
      poolId?: BigNumberish | null,
      pool?: null
    ): PoolCreatedEventFilter;
    PoolCreated(
      poolId?: BigNumberish | null,
      pool?: null
    ): PoolCreatedEventFilter;

    "PoolEdited(uint256,(uint128,uint128,uint128,uint128,uint128,uint256,uint256,uint256,bool))"(
      poolId?: BigNumberish | null,
      pool?: null
    ): PoolEditedEventFilter;
    PoolEdited(
      poolId?: BigNumberish | null,
      pool?: null
    ): PoolEditedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "UserClaimed(uint256,address,uint256)"(
      poolId?: BigNumberish | null,
      user?: string | null,
      amount?: null
    ): UserClaimedEventFilter;
    UserClaimed(
      poolId?: BigNumberish | null,
      user?: string | null,
      amount?: null
    ): UserClaimedEventFilter;

    "UserStaked(uint256,address,uint256)"(
      poolId?: BigNumberish | null,
      user?: string | null,
      amount?: null
    ): UserStakedEventFilter;
    UserStaked(
      poolId?: BigNumberish | null,
      user?: string | null,
      amount?: null
    ): UserStakedEventFilter;

    "UserWithdrawn(uint256,address,uint256)"(
      poolId?: BigNumberish | null,
      user?: string | null,
      amount?: null
    ): UserWithdrawnEventFilter;
    UserWithdrawn(
      poolId?: BigNumberish | null,
      user?: string | null,
      amount?: null
    ): UserWithdrawnEventFilter;
  };

  estimateGas: {
    Distribution_init(
      depositToken_: string,
      l1Sender_: string,
      poolsInfo_: IDistribution.PoolStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    bridgeOverplus(
      gasLimit_: BigNumberish,
      maxFeePerGas_: BigNumberish,
      maxSubmissionCost_: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    claim(
      poolId_: BigNumberish,
      user_: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    createPool(
      pool_: IDistribution.PoolStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<BigNumber>;

    editPool(
      poolId_: BigNumberish,
      pool_: IDistribution.PoolStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getCurrentUserReward(
      poolId_: BigNumberish,
      user_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodReward(
      poolId_: BigNumberish,
      startTime_: BigNumberish,
      endTime_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNotUpgradeable(overrides?: CallOverrides): Promise<BigNumber>;

    l1Sender(overrides?: CallOverrides): Promise<BigNumber>;

    manageUsersInPrivatePool(
      poolId_: BigNumberish,
      users_: string[],
      amounts_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    overplus(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolsData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeUpgradeability(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stake(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    totalDepositedInPublicPools(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    usersData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Distribution_init(
      depositToken_: string,
      l1Sender_: string,
      poolsInfo_: IDistribution.PoolStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    bridgeOverplus(
      gasLimit_: BigNumberish,
      maxFeePerGas_: BigNumberish,
      maxSubmissionCost_: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claim(
      poolId_: BigNumberish,
      user_: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createPool(
      pool_: IDistribution.PoolStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    editPool(
      poolId_: BigNumberish,
      pool_: IDistribution.PoolStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getCurrentUserReward(
      poolId_: BigNumberish,
      user_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodReward(
      poolId_: BigNumberish,
      startTime_: BigNumberish,
      endTime_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNotUpgradeable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1Sender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manageUsersInPrivatePool(
      poolId_: BigNumberish,
      users_: string[],
      amounts_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    overplus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolsData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeUpgradeability(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stake(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalDepositedInPublicPools(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    usersData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
