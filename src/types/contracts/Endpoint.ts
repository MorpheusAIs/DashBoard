/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface EndpointInterface extends utils.Interface {
  functions: {
    "BLOCK_VERSION()": FunctionFragment;
    "DEFAULT_VERSION()": FunctionFragment;
    "chainId()": FunctionFragment;
    "defaultReceiveLibraryAddress()": FunctionFragment;
    "defaultReceiveVersion()": FunctionFragment;
    "defaultSendLibrary()": FunctionFragment;
    "defaultSendVersion()": FunctionFragment;
    "estimateFees(uint16,address,bytes,bool,bytes)": FunctionFragment;
    "forceResumeReceive(uint16,bytes)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getConfig(uint16,uint16,address,uint256)": FunctionFragment;
    "getInboundNonce(uint16,bytes)": FunctionFragment;
    "getOutboundNonce(uint16,address)": FunctionFragment;
    "getReceiveLibraryAddress(address)": FunctionFragment;
    "getReceiveVersion(address)": FunctionFragment;
    "getSendLibraryAddress(address)": FunctionFragment;
    "getSendVersion(address)": FunctionFragment;
    "hasStoredPayload(uint16,bytes)": FunctionFragment;
    "inboundNonce(uint16,bytes)": FunctionFragment;
    "isReceivingPayload()": FunctionFragment;
    "isSendingPayload()": FunctionFragment;
    "latestVersion()": FunctionFragment;
    "libraryLookup(uint16)": FunctionFragment;
    "newVersion(address)": FunctionFragment;
    "outboundNonce(uint16,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "receivePayload(uint16,bytes,address,uint64,uint256,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "retryPayload(uint16,bytes,bytes)": FunctionFragment;
    "send(uint16,bytes,bytes,address,address,bytes)": FunctionFragment;
    "setConfig(uint16,uint16,uint256,bytes)": FunctionFragment;
    "setDefaultReceiveVersion(uint16)": FunctionFragment;
    "setDefaultSendVersion(uint16)": FunctionFragment;
    "setReceiveVersion(uint16)": FunctionFragment;
    "setSendVersion(uint16)": FunctionFragment;
    "storedPayload(uint16,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uaConfigLookup(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BLOCK_VERSION"
      | "DEFAULT_VERSION"
      | "chainId"
      | "defaultReceiveLibraryAddress"
      | "defaultReceiveVersion"
      | "defaultSendLibrary"
      | "defaultSendVersion"
      | "estimateFees"
      | "forceResumeReceive"
      | "getChainId"
      | "getConfig"
      | "getInboundNonce"
      | "getOutboundNonce"
      | "getReceiveLibraryAddress"
      | "getReceiveVersion"
      | "getSendLibraryAddress"
      | "getSendVersion"
      | "hasStoredPayload"
      | "inboundNonce"
      | "isReceivingPayload"
      | "isSendingPayload"
      | "latestVersion"
      | "libraryLookup"
      | "newVersion"
      | "outboundNonce"
      | "owner"
      | "receivePayload"
      | "renounceOwnership"
      | "retryPayload"
      | "send"
      | "setConfig"
      | "setDefaultReceiveVersion"
      | "setDefaultSendVersion"
      | "setReceiveVersion"
      | "setSendVersion"
      | "storedPayload"
      | "transferOwnership"
      | "uaConfigLookup"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BLOCK_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "defaultReceiveLibraryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultReceiveVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultSendLibrary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultSendVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateFees",
    values: [BigNumberish, string, BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forceResumeReceive",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConfig",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInboundNonce",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutboundNonce",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceiveLibraryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceiveVersion",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSendLibraryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSendVersion",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasStoredPayload",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "inboundNonce",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isReceivingPayload",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSendingPayload",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "libraryLookup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "newVersion", values: [string]): string;
  encodeFunctionData(
    functionFragment: "outboundNonce",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receivePayload",
    values: [
      BigNumberish,
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retryPayload",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [BigNumberish, BytesLike, BytesLike, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultReceiveVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultSendVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReceiveVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSendVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storedPayload",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uaConfigLookup",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "BLOCK_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultReceiveLibraryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultReceiveVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultSendLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultSendVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceResumeReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInboundNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutboundNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReceiveLibraryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReceiveVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSendLibraryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSendVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasStoredPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inboundNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReceivingPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSendingPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "libraryLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "outboundNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receivePayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retryPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultReceiveVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultSendVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReceiveVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSendVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uaConfigLookup",
    data: BytesLike
  ): Result;

  events: {
    "DefaultReceiveVersionSet(uint16)": EventFragment;
    "DefaultSendVersionSet(uint16)": EventFragment;
    "NewLibraryVersionAdded(uint16)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PayloadCleared(uint16,bytes,uint64,address)": EventFragment;
    "PayloadStored(uint16,bytes,address,uint64,bytes,bytes)": EventFragment;
    "UaForceResumeReceive(uint16,bytes)": EventFragment;
    "UaReceiveVersionSet(address,uint16)": EventFragment;
    "UaSendVersionSet(address,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DefaultReceiveVersionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultSendVersionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLibraryVersionAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayloadCleared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayloadStored"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UaForceResumeReceive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UaReceiveVersionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UaSendVersionSet"): EventFragment;
}

export interface DefaultReceiveVersionSetEventObject {
  version: number;
}
export type DefaultReceiveVersionSetEvent = TypedEvent<
  [number],
  DefaultReceiveVersionSetEventObject
>;

export type DefaultReceiveVersionSetEventFilter =
  TypedEventFilter<DefaultReceiveVersionSetEvent>;

export interface DefaultSendVersionSetEventObject {
  version: number;
}
export type DefaultSendVersionSetEvent = TypedEvent<
  [number],
  DefaultSendVersionSetEventObject
>;

export type DefaultSendVersionSetEventFilter =
  TypedEventFilter<DefaultSendVersionSetEvent>;

export interface NewLibraryVersionAddedEventObject {
  version: number;
}
export type NewLibraryVersionAddedEvent = TypedEvent<
  [number],
  NewLibraryVersionAddedEventObject
>;

export type NewLibraryVersionAddedEventFilter =
  TypedEventFilter<NewLibraryVersionAddedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PayloadClearedEventObject {
  srcChainId: number;
  srcAddress: string;
  nonce: BigNumber;
  dstAddress: string;
}
export type PayloadClearedEvent = TypedEvent<
  [number, string, BigNumber, string],
  PayloadClearedEventObject
>;

export type PayloadClearedEventFilter = TypedEventFilter<PayloadClearedEvent>;

export interface PayloadStoredEventObject {
  srcChainId: number;
  srcAddress: string;
  dstAddress: string;
  nonce: BigNumber;
  payload: string;
  reason: string;
}
export type PayloadStoredEvent = TypedEvent<
  [number, string, string, BigNumber, string, string],
  PayloadStoredEventObject
>;

export type PayloadStoredEventFilter = TypedEventFilter<PayloadStoredEvent>;

export interface UaForceResumeReceiveEventObject {
  chainId: number;
  srcAddress: string;
}
export type UaForceResumeReceiveEvent = TypedEvent<
  [number, string],
  UaForceResumeReceiveEventObject
>;

export type UaForceResumeReceiveEventFilter =
  TypedEventFilter<UaForceResumeReceiveEvent>;

export interface UaReceiveVersionSetEventObject {
  ua: string;
  version: number;
}
export type UaReceiveVersionSetEvent = TypedEvent<
  [string, number],
  UaReceiveVersionSetEventObject
>;

export type UaReceiveVersionSetEventFilter =
  TypedEventFilter<UaReceiveVersionSetEvent>;

export interface UaSendVersionSetEventObject {
  ua: string;
  version: number;
}
export type UaSendVersionSetEvent = TypedEvent<
  [string, number],
  UaSendVersionSetEventObject
>;

export type UaSendVersionSetEventFilter =
  TypedEventFilter<UaSendVersionSetEvent>;

export interface Endpoint extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EndpointInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BLOCK_VERSION(overrides?: CallOverrides): Promise<[number]>;

    DEFAULT_VERSION(overrides?: CallOverrides): Promise<[number]>;

    chainId(overrides?: CallOverrides): Promise<[number]>;

    defaultReceiveLibraryAddress(overrides?: CallOverrides): Promise<[string]>;

    defaultReceiveVersion(overrides?: CallOverrides): Promise<[number]>;

    defaultSendLibrary(overrides?: CallOverrides): Promise<[string]>;

    defaultSendVersion(overrides?: CallOverrides): Promise<[number]>;

    estimateFees(
      _dstChainId: BigNumberish,
      _userApplication: string,
      _payload: BytesLike,
      _payInZRO: boolean,
      _adapterParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
    >;

    forceResumeReceive(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getChainId(overrides?: CallOverrides): Promise<[number]>;

    getConfig(
      _version: BigNumberish,
      _chainId: BigNumberish,
      _userApplication: string,
      _configType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getInboundNonce(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOutboundNonce(
      _dstChainId: BigNumberish,
      _srcAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReceiveLibraryAddress(
      _userApplication: string,
      overrides?: CallOverrides
    ): Promise<[string] & { receiveLibraryAddress: string }>;

    getReceiveVersion(
      _userApplication: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getSendLibraryAddress(
      _userApplication: string,
      overrides?: CallOverrides
    ): Promise<[string] & { sendLibraryAddress: string }>;

    getSendVersion(
      _userApplication: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    hasStoredPayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    inboundNonce(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isReceivingPayload(overrides?: CallOverrides): Promise<[boolean]>;

    isSendingPayload(overrides?: CallOverrides): Promise<[boolean]>;

    latestVersion(overrides?: CallOverrides): Promise<[number]>;

    libraryLookup(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    newVersion(
      _newLayerZeroLibraryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    outboundNonce(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    receivePayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _dstAddress: string,
      _nonce: BigNumberish,
      _gasLimit: BigNumberish,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    retryPayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    send(
      _dstChainId: BigNumberish,
      _destination: BytesLike,
      _payload: BytesLike,
      _refundAddress: string,
      _zroPaymentAddress: string,
      _adapterParams: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    setConfig(
      _version: BigNumberish,
      _chainId: BigNumberish,
      _configType: BigNumberish,
      _config: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDefaultReceiveVersion(
      _newDefaultReceiveVersion: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDefaultSendVersion(
      _newDefaultSendVersion: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setReceiveVersion(
      _newVersion: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSendVersion(
      _newVersion: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    storedPayload(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        payloadLength: BigNumber;
        dstAddress: string;
        payloadHash: string;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    uaConfigLookup(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, string] & {
        sendVersion: number;
        receiveVersion: number;
        receiveLibraryAddress: string;
        sendLibrary: string;
      }
    >;
  };

  BLOCK_VERSION(overrides?: CallOverrides): Promise<number>;

  DEFAULT_VERSION(overrides?: CallOverrides): Promise<number>;

  chainId(overrides?: CallOverrides): Promise<number>;

  defaultReceiveLibraryAddress(overrides?: CallOverrides): Promise<string>;

  defaultReceiveVersion(overrides?: CallOverrides): Promise<number>;

  defaultSendLibrary(overrides?: CallOverrides): Promise<string>;

  defaultSendVersion(overrides?: CallOverrides): Promise<number>;

  estimateFees(
    _dstChainId: BigNumberish,
    _userApplication: string,
    _payload: BytesLike,
    _payInZRO: boolean,
    _adapterParams: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
  >;

  forceResumeReceive(
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getChainId(overrides?: CallOverrides): Promise<number>;

  getConfig(
    _version: BigNumberish,
    _chainId: BigNumberish,
    _userApplication: string,
    _configType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getInboundNonce(
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOutboundNonce(
    _dstChainId: BigNumberish,
    _srcAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReceiveLibraryAddress(
    _userApplication: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getReceiveVersion(
    _userApplication: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getSendLibraryAddress(
    _userApplication: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getSendVersion(
    _userApplication: string,
    overrides?: CallOverrides
  ): Promise<number>;

  hasStoredPayload(
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  inboundNonce(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isReceivingPayload(overrides?: CallOverrides): Promise<boolean>;

  isSendingPayload(overrides?: CallOverrides): Promise<boolean>;

  latestVersion(overrides?: CallOverrides): Promise<number>;

  libraryLookup(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  newVersion(
    _newLayerZeroLibraryAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  outboundNonce(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  receivePayload(
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    _dstAddress: string,
    _nonce: BigNumberish,
    _gasLimit: BigNumberish,
    _payload: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  retryPayload(
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    _payload: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  send(
    _dstChainId: BigNumberish,
    _destination: BytesLike,
    _payload: BytesLike,
    _refundAddress: string,
    _zroPaymentAddress: string,
    _adapterParams: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  setConfig(
    _version: BigNumberish,
    _chainId: BigNumberish,
    _configType: BigNumberish,
    _config: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDefaultReceiveVersion(
    _newDefaultReceiveVersion: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDefaultSendVersion(
    _newDefaultSendVersion: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setReceiveVersion(
    _newVersion: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSendVersion(
    _newVersion: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  storedPayload(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & {
      payloadLength: BigNumber;
      dstAddress: string;
      payloadHash: string;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  uaConfigLookup(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, number, string, string] & {
      sendVersion: number;
      receiveVersion: number;
      receiveLibraryAddress: string;
      sendLibrary: string;
    }
  >;

  callStatic: {
    BLOCK_VERSION(overrides?: CallOverrides): Promise<number>;

    DEFAULT_VERSION(overrides?: CallOverrides): Promise<number>;

    chainId(overrides?: CallOverrides): Promise<number>;

    defaultReceiveLibraryAddress(overrides?: CallOverrides): Promise<string>;

    defaultReceiveVersion(overrides?: CallOverrides): Promise<number>;

    defaultSendLibrary(overrides?: CallOverrides): Promise<string>;

    defaultSendVersion(overrides?: CallOverrides): Promise<number>;

    estimateFees(
      _dstChainId: BigNumberish,
      _userApplication: string,
      _payload: BytesLike,
      _payInZRO: boolean,
      _adapterParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
    >;

    forceResumeReceive(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getChainId(overrides?: CallOverrides): Promise<number>;

    getConfig(
      _version: BigNumberish,
      _chainId: BigNumberish,
      _userApplication: string,
      _configType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getInboundNonce(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutboundNonce(
      _dstChainId: BigNumberish,
      _srcAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceiveLibraryAddress(
      _userApplication: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getReceiveVersion(
      _userApplication: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getSendLibraryAddress(
      _userApplication: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getSendVersion(
      _userApplication: string,
      overrides?: CallOverrides
    ): Promise<number>;

    hasStoredPayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    inboundNonce(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReceivingPayload(overrides?: CallOverrides): Promise<boolean>;

    isSendingPayload(overrides?: CallOverrides): Promise<boolean>;

    latestVersion(overrides?: CallOverrides): Promise<number>;

    libraryLookup(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    newVersion(
      _newLayerZeroLibraryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    outboundNonce(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    receivePayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _dstAddress: string,
      _nonce: BigNumberish,
      _gasLimit: BigNumberish,
      _payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    retryPayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    send(
      _dstChainId: BigNumberish,
      _destination: BytesLike,
      _payload: BytesLike,
      _refundAddress: string,
      _zroPaymentAddress: string,
      _adapterParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfig(
      _version: BigNumberish,
      _chainId: BigNumberish,
      _configType: BigNumberish,
      _config: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultReceiveVersion(
      _newDefaultReceiveVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultSendVersion(
      _newDefaultSendVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReceiveVersion(
      _newVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSendVersion(
      _newVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    storedPayload(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        payloadLength: BigNumber;
        dstAddress: string;
        payloadHash: string;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uaConfigLookup(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, string] & {
        sendVersion: number;
        receiveVersion: number;
        receiveLibraryAddress: string;
        sendLibrary: string;
      }
    >;
  };

  filters: {
    "DefaultReceiveVersionSet(uint16)"(
      version?: null
    ): DefaultReceiveVersionSetEventFilter;
    DefaultReceiveVersionSet(
      version?: null
    ): DefaultReceiveVersionSetEventFilter;

    "DefaultSendVersionSet(uint16)"(
      version?: null
    ): DefaultSendVersionSetEventFilter;
    DefaultSendVersionSet(version?: null): DefaultSendVersionSetEventFilter;

    "NewLibraryVersionAdded(uint16)"(
      version?: null
    ): NewLibraryVersionAddedEventFilter;
    NewLibraryVersionAdded(version?: null): NewLibraryVersionAddedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PayloadCleared(uint16,bytes,uint64,address)"(
      srcChainId?: null,
      srcAddress?: null,
      nonce?: null,
      dstAddress?: null
    ): PayloadClearedEventFilter;
    PayloadCleared(
      srcChainId?: null,
      srcAddress?: null,
      nonce?: null,
      dstAddress?: null
    ): PayloadClearedEventFilter;

    "PayloadStored(uint16,bytes,address,uint64,bytes,bytes)"(
      srcChainId?: null,
      srcAddress?: null,
      dstAddress?: null,
      nonce?: null,
      payload?: null,
      reason?: null
    ): PayloadStoredEventFilter;
    PayloadStored(
      srcChainId?: null,
      srcAddress?: null,
      dstAddress?: null,
      nonce?: null,
      payload?: null,
      reason?: null
    ): PayloadStoredEventFilter;

    "UaForceResumeReceive(uint16,bytes)"(
      chainId?: null,
      srcAddress?: null
    ): UaForceResumeReceiveEventFilter;
    UaForceResumeReceive(
      chainId?: null,
      srcAddress?: null
    ): UaForceResumeReceiveEventFilter;

    "UaReceiveVersionSet(address,uint16)"(
      ua?: null,
      version?: null
    ): UaReceiveVersionSetEventFilter;
    UaReceiveVersionSet(
      ua?: null,
      version?: null
    ): UaReceiveVersionSetEventFilter;

    "UaSendVersionSet(address,uint16)"(
      ua?: null,
      version?: null
    ): UaSendVersionSetEventFilter;
    UaSendVersionSet(ua?: null, version?: null): UaSendVersionSetEventFilter;
  };

  estimateGas: {
    BLOCK_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    defaultReceiveLibraryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    defaultReceiveVersion(overrides?: CallOverrides): Promise<BigNumber>;

    defaultSendLibrary(overrides?: CallOverrides): Promise<BigNumber>;

    defaultSendVersion(overrides?: CallOverrides): Promise<BigNumber>;

    estimateFees(
      _dstChainId: BigNumberish,
      _userApplication: string,
      _payload: BytesLike,
      _payInZRO: boolean,
      _adapterParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceResumeReceive(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getConfig(
      _version: BigNumberish,
      _chainId: BigNumberish,
      _userApplication: string,
      _configType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInboundNonce(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutboundNonce(
      _dstChainId: BigNumberish,
      _srcAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceiveLibraryAddress(
      _userApplication: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceiveVersion(
      _userApplication: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSendLibraryAddress(
      _userApplication: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSendVersion(
      _userApplication: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasStoredPayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inboundNonce(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReceivingPayload(overrides?: CallOverrides): Promise<BigNumber>;

    isSendingPayload(overrides?: CallOverrides): Promise<BigNumber>;

    latestVersion(overrides?: CallOverrides): Promise<BigNumber>;

    libraryLookup(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newVersion(
      _newLayerZeroLibraryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    outboundNonce(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    receivePayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _dstAddress: string,
      _nonce: BigNumberish,
      _gasLimit: BigNumberish,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    retryPayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    send(
      _dstChainId: BigNumberish,
      _destination: BytesLike,
      _payload: BytesLike,
      _refundAddress: string,
      _zroPaymentAddress: string,
      _adapterParams: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    setConfig(
      _version: BigNumberish,
      _chainId: BigNumberish,
      _configType: BigNumberish,
      _config: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDefaultReceiveVersion(
      _newDefaultReceiveVersion: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDefaultSendVersion(
      _newDefaultSendVersion: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setReceiveVersion(
      _newVersion: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSendVersion(
      _newVersion: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    storedPayload(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    uaConfigLookup(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BLOCK_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultReceiveLibraryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultReceiveVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultSendLibrary(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultSendVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateFees(
      _dstChainId: BigNumberish,
      _userApplication: string,
      _payload: BytesLike,
      _payInZRO: boolean,
      _adapterParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceResumeReceive(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConfig(
      _version: BigNumberish,
      _chainId: BigNumberish,
      _userApplication: string,
      _configType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInboundNonce(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutboundNonce(
      _dstChainId: BigNumberish,
      _srcAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceiveLibraryAddress(
      _userApplication: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceiveVersion(
      _userApplication: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSendLibraryAddress(
      _userApplication: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSendVersion(
      _userApplication: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasStoredPayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inboundNonce(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReceivingPayload(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSendingPayload(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    libraryLookup(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newVersion(
      _newLayerZeroLibraryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    outboundNonce(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivePayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _dstAddress: string,
      _nonce: BigNumberish,
      _gasLimit: BigNumberish,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    retryPayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    send(
      _dstChainId: BigNumberish,
      _destination: BytesLike,
      _payload: BytesLike,
      _refundAddress: string,
      _zroPaymentAddress: string,
      _adapterParams: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setConfig(
      _version: BigNumberish,
      _chainId: BigNumberish,
      _configType: BigNumberish,
      _config: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDefaultReceiveVersion(
      _newDefaultReceiveVersion: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDefaultSendVersion(
      _newDefaultSendVersion: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setReceiveVersion(
      _newVersion: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSendVersion(
      _newVersion: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    storedPayload(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    uaConfigLookup(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
